{
  "hash": "df789dec40821b00cd4da9e8ad1818e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 4: Data Tidying with tidyr\"\ndate: today\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n---\n\n## Learning Objectives\n\nBy the end of this chapter, you will master:\n\n- Understanding tidy data principles\n- Pivoting data between wide and long formats\n- Separating and uniting columns\n- Handling missing values systematically\n- Nesting and unnesting data\n- Working with list-columns\n- Expanding and completing data\n- Advanced tidying techniques\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.4     v readr     2.1.5\nv forcats   1.0.0     v stringr   1.5.2\nv ggplot2   4.0.0     v tibble    3.3.0\nv lubridate 1.9.4     v tidyr     1.3.1\nv purrr     1.1.0     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(gapminder)\nlibrary(palmerpenguins)\n\n# We'll create various messy datasets to practice tidying\nset.seed(123)  # For reproducibility\n```\n:::\n\n\n## Tidy Data Principles\n\n### What Makes Data Tidy?\n\nTidy data follows three interrelated rules:\n\n1. **Each variable forms a column**\n2. **Each observation forms a row**\n3. **Each type of observational unit forms a table**\n\n### Why Tidy Data?\n\n- Consistent structure makes tools easier to learn\n- R's vectorized operations work naturally with tidy data\n- Supports the grammar of data manipulation\n\n### Common Problems with Messy Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Problem 1: Column headers are values, not variable names\nmessy1 <- tibble(\n  country = c(\"Afghanistan\", \"Brazil\", \"China\"),\n  `1999` = c(745, 37737, 212258),\n  `2000` = c(2666, 80488, 213766)\n)\nprint(\"Messy data - years as columns:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Messy data - years as columns:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmessy1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  country     `1999` `2000`\n  <chr>        <dbl>  <dbl>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n\n\n:::\n\n```{.r .cell-code}\n# Tidy version\ntidy1 <- messy1 %>%\n  pivot_longer(\n    cols = `1999`:`2000`,\n    names_to = \"year\",\n    values_to = \"cases\"\n  ) %>%\n  mutate(year = as.integer(year))\nprint(\"Tidy version:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tidy version:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntidy1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 3\n  country      year  cases\n  <chr>       <int>  <dbl>\n1 Afghanistan  1999    745\n2 Afghanistan  2000   2666\n3 Brazil       1999  37737\n4 Brazil       2000  80488\n5 China        1999 212258\n6 China        2000 213766\n```\n\n\n:::\n\n```{.r .cell-code}\n# Problem 2: Multiple variables in one column\nmessy2 <- tibble(\n  country = c(\"Afghanistan\", \"Brazil\", \"China\"),\n  rate = c(\"745/19987071\", \"37737/172006362\", \"212258/1272915272\")\n)\nprint(\"Messy data - multiple values in one column:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Messy data - multiple values in one column:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmessy2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  country     rate             \n  <chr>       <chr>            \n1 Afghanistan 745/19987071     \n2 Brazil      37737/172006362  \n3 China       212258/1272915272\n```\n\n\n:::\n\n```{.r .cell-code}\n# Tidy version\ntidy2 <- messy2 %>%\n  separate(rate, into = c(\"cases\", \"population\"), sep = \"/\", convert = TRUE) %>%\n  mutate(rate_per_10k = cases / population * 10000)\nprint(\"Tidy version:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tidy version:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntidy2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  country      cases population rate_per_10k\n  <chr>        <int>      <int>        <dbl>\n1 Afghanistan    745   19987071        0.373\n2 Brazil       37737  172006362        2.19 \n3 China       212258 1272915272        1.67 \n```\n\n\n:::\n:::\n\n\n## Pivoting Data\n\n### pivot_longer(): Wide to Long\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example: Wide format data\nwide_data <- tibble(\n  student = c(\"Alice\", \"Bob\", \"Charlie\"),\n  math_score = c(85, 92, 78),\n  science_score = c(90, 88, 85),\n  english_score = c(88, 85, 90),\n  history_score = c(92, 90, 88)\n)\nprint(\"Wide format:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Wide format:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwide_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  student math_score science_score english_score history_score\n  <chr>        <dbl>         <dbl>         <dbl>         <dbl>\n1 Alice           85            90            88            92\n2 Bob             92            88            85            90\n3 Charlie         78            85            90            88\n```\n\n\n:::\n\n```{.r .cell-code}\n# Basic pivot_longer\nlong_data <- wide_data %>%\n  pivot_longer(\n    cols = ends_with(\"_score\"),\n    names_to = \"subject\",\n    values_to = \"score\"\n  )\nprint(\"Long format:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Long format:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 3\n   student subject       score\n   <chr>   <chr>         <dbl>\n 1 Alice   math_score       85\n 2 Alice   science_score    90\n 3 Alice   english_score    88\n 4 Alice   history_score    92\n 5 Bob     math_score       92\n 6 Bob     science_score    88\n 7 Bob     english_score    85\n 8 Bob     history_score    90\n 9 Charlie math_score       78\n10 Charlie science_score    85\n11 Charlie english_score    90\n12 Charlie history_score    88\n```\n\n\n:::\n\n```{.r .cell-code}\n# Advanced: Extract parts of column names\nlong_data_clean <- wide_data %>%\n  pivot_longer(\n    cols = ends_with(\"_score\"),\n    names_to = \"subject\",\n    names_pattern = \"(.*)_score\",  # Extract subject name without \"_score\"\n    values_to = \"score\"\n  )\nprint(\"Long format with cleaned names:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Long format with cleaned names:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_data_clean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 3\n   student subject score\n   <chr>   <chr>   <dbl>\n 1 Alice   math       85\n 2 Alice   science    90\n 3 Alice   english    88\n 4 Alice   history    92\n 5 Bob     math       92\n 6 Bob     science    88\n 7 Bob     english    85\n 8 Bob     history    90\n 9 Charlie math       78\n10 Charlie science    85\n11 Charlie english    90\n12 Charlie history    88\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple value columns\nquarterly_sales <- tibble(\n  company = c(\"A\", \"B\", \"C\"),\n  revenue_q1 = c(100, 200, 150),\n  revenue_q2 = c(110, 210, 160),\n  costs_q1 = c(80, 150, 120),\n  costs_q2 = c(85, 155, 125)\n)\n\nquarterly_long <- quarterly_sales %>%\n  pivot_longer(\n    cols = -company,\n    names_to = c(\".value\", \"quarter\"),\n    names_sep = \"_\"\n  )\nprint(\"Multiple value columns:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Multiple value columns:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nquarterly_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 4\n  company quarter revenue costs\n  <chr>   <chr>     <dbl> <dbl>\n1 A       q1          100    80\n2 A       q2          110    85\n3 B       q1          200   150\n4 B       q2          210   155\n5 C       q1          150   120\n6 C       q2          160   125\n```\n\n\n:::\n:::\n\n\n### pivot_wider(): Long to Wide\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic pivot_wider\nwide_again <- long_data_clean %>%\n  pivot_wider(\n    names_from = subject,\n    values_from = score\n  )\nprint(\"Back to wide format:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Back to wide format:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwide_again\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  student  math science english history\n  <chr>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Alice      85      90      88      92\n2 Bob        92      88      85      90\n3 Charlie    78      85      90      88\n```\n\n\n:::\n\n```{.r .cell-code}\n# With custom column names\nwide_custom <- long_data_clean %>%\n  pivot_wider(\n    names_from = subject,\n    values_from = score,\n    names_prefix = \"score_\"\n  )\nprint(\"Wide with custom names:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Wide with custom names:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwide_custom\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  student score_math score_science score_english score_history\n  <chr>        <dbl>         <dbl>         <dbl>         <dbl>\n1 Alice           85            90            88            92\n2 Bob             92            88            85            90\n3 Charlie         78            85            90            88\n```\n\n\n:::\n\n```{.r .cell-code}\n# Handling multiple values\nmulti_observations <- tibble(\n  day = c(1, 1, 2, 2, 3, 3),\n  measurement = c(\"temp\", \"humidity\", \"temp\", \"humidity\", \"temp\", \"humidity\"),\n  value = c(20, 60, 22, 55, 21, 58)\n)\n\nwide_multi <- multi_observations %>%\n  pivot_wider(\n    names_from = measurement,\n    values_from = value\n  )\nprint(\"Multiple measurements to wide:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Multiple measurements to wide:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwide_multi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n    day  temp humidity\n  <dbl> <dbl>    <dbl>\n1     1    20       60\n2     2    22       55\n3     3    21       58\n```\n\n\n:::\n:::\n\n\n### Complex Pivoting Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Real-world example with gapminder\ngapminder_wide <- gapminder %>%\n  select(country, continent, year, lifeExp) %>%\n  pivot_wider(\n    names_from = year,\n    names_prefix = \"year_\",\n    values_from = lifeExp\n  ) %>%\n  head()\nprint(\"Gapminder in wide format:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Gapminder in wide format:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 14\n  country  continent year_1952 year_1957 year_1962 year_1967 year_1972 year_1977\n  <fct>    <fct>         <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>\n1 Afghani~ Asia           28.8      30.3      32.0      34.0      36.1      38.4\n2 Albania  Europe         55.2      59.3      64.8      66.2      67.7      68.9\n3 Algeria  Africa         43.1      45.7      48.3      51.4      54.5      58.0\n4 Angola   Africa         30.0      32.0      34        36.0      37.9      39.5\n5 Argenti~ Americas       62.5      64.4      65.1      65.6      67.1      68.5\n6 Austral~ Oceania        69.1      70.3      70.9      71.1      71.9      73.5\n# i 6 more variables: year_1982 <dbl>, year_1987 <dbl>, year_1992 <dbl>,\n#   year_1997 <dbl>, year_2002 <dbl>, year_2007 <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Creating a correlation matrix format\npenguins_corr <- penguins %>%\n  select(where(is.numeric)) %>%\n  drop_na() %>%\n  cor() %>%\n  as.data.frame() %>%\n  rownames_to_column(\"var1\") %>%\n  pivot_longer(\n    cols = -var1,\n    names_to = \"var2\",\n    values_to = \"correlation\"\n  ) %>%\n  filter(var1 < var2)  # Keep only upper triangle\nprint(\"Correlation matrix in long format:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Correlation matrix in long format:\"\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins_corr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 3\n   var1              var2              correlation\n   <chr>             <chr>                   <dbl>\n 1 bill_length_mm    flipper_length_mm      0.656 \n 2 bill_length_mm    body_mass_g            0.595 \n 3 bill_length_mm    year                   0.0545\n 4 bill_depth_mm     bill_length_mm        -0.235 \n 5 bill_depth_mm     flipper_length_mm     -0.584 \n 6 bill_depth_mm     body_mass_g           -0.472 \n 7 bill_depth_mm     year                  -0.0604\n 8 flipper_length_mm year                   0.170 \n 9 body_mass_g       flipper_length_mm      0.871 \n10 body_mass_g       year                   0.0422\n```\n\n\n:::\n:::\n\n\n## Separating and Uniting Columns\n\n### separate(): Split One Column into Multiple\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic separation\ndates_data <- tibble(\n  date = c(\"2023-01-15\", \"2023-02-20\", \"2023-03-25\"),\n  value = c(100, 120, 115)\n)\n\nseparated_dates <- dates_data %>%\n  separate(date, into = c(\"year\", \"month\", \"day\"), sep = \"-\", convert = TRUE)\nprint(\"Separated date components:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Separated date components:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nseparated_dates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n   year month   day value\n  <int> <int> <int> <dbl>\n1  2023     1    15   100\n2  2023     2    20   120\n3  2023     3    25   115\n```\n\n\n:::\n\n```{.r .cell-code}\n# Separation with regular expressions\ncomplex_data <- tibble(\n  code = c(\"USA-NY-001\", \"CAN-ON-002\", \"MEX-DF-003\"),\n  sales = c(1000, 1500, 800)\n)\n\nseparated_complex <- complex_data %>%\n  separate(\n    code, \n    into = c(\"country\", \"state\", \"id\"),\n    sep = \"-\"\n  )\nprint(\"Complex separation:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Complex separation:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nseparated_complex\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  country state id    sales\n  <chr>   <chr> <chr> <dbl>\n1 USA     NY    001    1000\n2 CAN     ON    002    1500\n3 MEX     DF    003     800\n```\n\n\n:::\n\n```{.r .cell-code}\n# Keep original column\nwith_original <- complex_data %>%\n  separate(\n    code,\n    into = c(\"country\", \"state\", \"id\"),\n    sep = \"-\",\n    remove = FALSE  # Keep original column\n  )\nprint(\"With original column:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"With original column:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwith_original\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  code       country state id    sales\n  <chr>      <chr>   <chr> <chr> <dbl>\n1 USA-NY-001 USA     NY    001    1000\n2 CAN-ON-002 CAN     ON    002    1500\n3 MEX-DF-003 MEX     DF    003     800\n```\n\n\n:::\n:::\n\n\n### separate_rows(): Create Multiple Rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data with multiple values in cells\nmulti_value_data <- tibble(\n  person = c(\"Alice\", \"Bob\", \"Charlie\"),\n  languages = c(\"R,Python,SQL\", \"R,JavaScript\", \"Python,SQL,Julia\"),\n  years_exp = c(5, 3, 7)\n)\n\nseparated_rows <- multi_value_data %>%\n  separate_rows(languages, sep = \",\")\nprint(\"Multiple values to rows:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Multiple values to rows:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nseparated_rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 3\n  person  languages  years_exp\n  <chr>   <chr>          <dbl>\n1 Alice   R                  5\n2 Alice   Python             5\n3 Alice   SQL                5\n4 Bob     R                  3\n5 Bob     JavaScript         3\n6 Charlie Python             7\n7 Charlie SQL                7\n8 Charlie Julia              7\n```\n\n\n:::\n\n```{.r .cell-code}\n# Count languages per person\nlanguage_counts <- separated_rows %>%\n  group_by(person) %>%\n  summarise(\n    num_languages = n(),\n    languages_list = paste(languages, collapse = \", \")\n  )\nprint(\"Language summary:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Language summary:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlanguage_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  person  num_languages languages_list    \n  <chr>           <int> <chr>             \n1 Alice               3 R, Python, SQL    \n2 Bob                 2 R, JavaScript     \n3 Charlie             3 Python, SQL, Julia\n```\n\n\n:::\n:::\n\n\n### unite(): Combine Multiple Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic unite\naddress_data <- tibble(\n  street_num = c(\"123\", \"456\", \"789\"),\n  street_name = c(\"Main St\", \"Oak Ave\", \"Park Rd\"),\n  city = c(\"Boston\", \"New York\", \"Chicago\"),\n  state = c(\"MA\", \"NY\", \"IL\")\n)\n\nunited_address <- address_data %>%\n  unite(full_address, street_num, street_name, city, state, sep = \", \")\nprint(\"United address:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"United address:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nunited_address\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 1\n  full_address              \n  <chr>                     \n1 123, Main St, Boston, MA  \n2 456, Oak Ave, New York, NY\n3 789, Park Rd, Chicago, IL \n```\n\n\n:::\n\n```{.r .cell-code}\n# Unite with custom separator\ndate_parts <- tibble(\n  year = c(2023, 2023, 2023),\n  month = c(1, 2, 3),\n  day = c(15, 20, 25)\n)\n\nunited_dates <- date_parts %>%\n  unite(date, year, month, day, sep = \"-\") %>%\n  mutate(date = as.Date(date))\nprint(\"United dates:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"United dates:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nunited_dates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 1\n  date      \n  <date>    \n1 2023-01-15\n2 2023-02-20\n3 2023-03-25\n```\n\n\n:::\n:::\n\n\n## Handling Missing Values\n\n### Explicit vs Implicit Missing Values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dataset with implicit missing values\nstocks <- tibble(\n  year = c(2020, 2020, 2021, 2022, 2022),\n  quarter = c(1, 4, 2, 1, 3),\n  revenue = c(100, 120, 110, 130, 125)\n)\nprint(\"Data with implicit missing values:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Data with implicit missing values:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstocks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 3\n   year quarter revenue\n  <dbl>   <dbl>   <dbl>\n1  2020       1     100\n2  2020       4     120\n3  2021       2     110\n4  2022       1     130\n5  2022       3     125\n```\n\n\n:::\n\n```{.r .cell-code}\n# Make implicit missing values explicit\ncomplete_stocks <- stocks %>%\n  complete(year, quarter)\nprint(\"After complete():\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"After complete():\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncomplete_stocks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 3\n    year quarter revenue\n   <dbl>   <dbl>   <dbl>\n 1  2020       1     100\n 2  2020       2      NA\n 3  2020       3      NA\n 4  2020       4     120\n 5  2021       1      NA\n 6  2021       2     110\n 7  2021       3      NA\n 8  2021       4      NA\n 9  2022       1     130\n10  2022       2      NA\n11  2022       3     125\n12  2022       4      NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# Fill missing values\nfilled_stocks <- complete_stocks %>%\n  arrange(year, quarter) %>%\n  fill(revenue, .direction = \"down\")\nprint(\"After filling:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"After filling:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nfilled_stocks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 3\n    year quarter revenue\n   <dbl>   <dbl>   <dbl>\n 1  2020       1     100\n 2  2020       2     100\n 3  2020       3     100\n 4  2020       4     120\n 5  2021       1     120\n 6  2021       2     110\n 7  2021       3     110\n 8  2021       4     110\n 9  2022       1     130\n10  2022       2     130\n11  2022       3     125\n12  2022       4     125\n```\n\n\n:::\n:::\n\n\n### drop_na() and replace_na()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data with NAs\nmessy_data <- tibble(\n  x = c(1, 2, NA, 4, 5),\n  y = c(\"a\", NA, \"c\", \"d\", NA),\n  z = c(10, 20, 30, NA, 50)\n)\nprint(\"Data with NAs:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Data with NAs:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmessy_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 3\n      x y         z\n  <dbl> <chr> <dbl>\n1     1 a        10\n2     2 <NA>     20\n3    NA c        30\n4     4 d        NA\n5     5 <NA>     50\n```\n\n\n:::\n\n```{.r .cell-code}\n# Drop rows with any NA\nclean_all <- messy_data %>%\n  drop_na()\nprint(\"Drop all NAs:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Drop all NAs:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclean_all\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 3\n      x y         z\n  <dbl> <chr> <dbl>\n1     1 a        10\n```\n\n\n:::\n\n```{.r .cell-code}\n# Drop NAs from specific columns\nclean_x <- messy_data %>%\n  drop_na(x)\nprint(\"Drop NAs from x only:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Drop NAs from x only:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclean_x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 3\n      x y         z\n  <dbl> <chr> <dbl>\n1     1 a        10\n2     2 <NA>     20\n3     4 d        NA\n4     5 <NA>     50\n```\n\n\n:::\n\n```{.r .cell-code}\n# Replace NAs with specific values\nreplaced_data <- messy_data %>%\n  replace_na(list(\n    x = 0,\n    y = \"missing\",\n    z = mean(messy_data$z, na.rm = TRUE)\n  ))\nprint(\"Replaced NAs:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Replaced NAs:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nreplaced_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 3\n      x y           z\n  <dbl> <chr>   <dbl>\n1     1 a        10  \n2     2 missing  20  \n3     0 c        30  \n4     4 d        27.5\n5     5 missing  50  \n```\n\n\n:::\n:::\n\n\n### Advanced Missing Value Patterns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create time series with gaps\ntime_series <- tibble(\n  date = as.Date(c(\"2023-01-01\", \"2023-01-03\", \"2023-01-07\", \"2023-01-08\")),\n  value = c(100, 105, 115, 118)\n)\n\n# Complete the time series\ncomplete_series <- time_series %>%\n  complete(date = seq.Date(min(date), max(date), by = \"day\"))\nprint(\"Complete time series:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Complete time series:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncomplete_series\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 2\n  date       value\n  <date>     <dbl>\n1 2023-01-01   100\n2 2023-01-02    NA\n3 2023-01-03   105\n4 2023-01-04    NA\n5 2023-01-05    NA\n6 2023-01-06    NA\n7 2023-01-07   115\n8 2023-01-08   118\n```\n\n\n:::\n\n```{.r .cell-code}\n# Forward fill (last observation carried forward)\nfilled_series <- complete_series %>%\n  fill(value, .direction = \"down\")\nprint(\"Forward filled:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Forward filled:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nfilled_series\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 2\n  date       value\n  <date>     <dbl>\n1 2023-01-01   100\n2 2023-01-02   100\n3 2023-01-03   105\n4 2023-01-04   105\n5 2023-01-05   105\n6 2023-01-06   105\n7 2023-01-07   115\n8 2023-01-08   118\n```\n\n\n:::\n\n```{.r .cell-code}\n# Interpolation (requires zoo package)\nif (require(zoo, quietly = TRUE)) {\n  interpolated <- complete_series %>%\n    mutate(value_interpolated = zoo::na.approx(value, na.rm = FALSE))\n  print(\"Linear interpolation:\")\n  interpolated\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Linear interpolation:\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 3\n  date       value value_interpolated\n  <date>     <dbl>              <dbl>\n1 2023-01-01   100               100 \n2 2023-01-02    NA               102.\n3 2023-01-03   105               105 \n4 2023-01-04    NA               108.\n5 2023-01-05    NA               110 \n6 2023-01-06    NA               112.\n7 2023-01-07   115               115 \n8 2023-01-08   118               118 \n```\n\n\n:::\n:::\n\n\n## Nesting and Unnesting\n\n### Creating Nested Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group and nest\nnested_penguins <- penguins %>%\n  group_by(species, island) %>%\n  nest()\nprint(\"Nested penguins data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Nested penguins data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnested_penguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 3\n# Groups:   species, island [5]\n  species   island    data              \n  <fct>     <fct>     <list>            \n1 Adelie    Torgersen <tibble [52 x 6]> \n2 Adelie    Biscoe    <tibble [44 x 6]> \n3 Adelie    Dream     <tibble [56 x 6]> \n4 Gentoo    Biscoe    <tibble [124 x 6]>\n5 Chinstrap Dream     <tibble [68 x 6]> \n```\n\n\n:::\n\n```{.r .cell-code}\n# Access nested data\nprint(\"First nested tibble:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"First nested tibble:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnested_penguins$data[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 52 x 6\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex     year\n            <dbl>         <dbl>             <int>       <int> <fct>  <int>\n 1           39.1          18.7               181        3750 male    2007\n 2           39.5          17.4               186        3800 female  2007\n 3           40.3          18                 195        3250 female  2007\n 4           NA            NA                  NA          NA <NA>    2007\n 5           36.7          19.3               193        3450 female  2007\n 6           39.3          20.6               190        3650 male    2007\n 7           38.9          17.8               181        3625 female  2007\n 8           39.2          19.6               195        4675 male    2007\n 9           34.1          18.1               193        3475 <NA>    2007\n10           42            20.2               190        4250 <NA>    2007\n# i 42 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Nested with custom columns\ncustom_nest <- penguins %>%\n  group_by(species) %>%\n  nest(\n    bill_data = c(bill_length_mm, bill_depth_mm),\n    body_data = c(flipper_length_mm, body_mass_g)\n  )\nprint(\"Custom nested columns:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Custom nested columns:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncustom_nest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35 x 6\n# Groups:   species [3]\n   species island    sex     year bill_data         body_data        \n   <fct>   <fct>     <fct>  <int> <list>            <list>           \n 1 Adelie  Torgersen male    2007 <tibble [7 x 2]>  <tibble [7 x 2]> \n 2 Adelie  Torgersen female  2007 <tibble [8 x 2]>  <tibble [8 x 2]> \n 3 Adelie  Torgersen <NA>    2007 <tibble [5 x 2]>  <tibble [5 x 2]> \n 4 Adelie  Biscoe    female  2007 <tibble [5 x 2]>  <tibble [5 x 2]> \n 5 Adelie  Biscoe    male    2007 <tibble [5 x 2]>  <tibble [5 x 2]> \n 6 Adelie  Dream     female  2007 <tibble [9 x 2]>  <tibble [9 x 2]> \n 7 Adelie  Dream     male    2007 <tibble [10 x 2]> <tibble [10 x 2]>\n 8 Adelie  Dream     <NA>    2007 <tibble [1 x 2]>  <tibble [1 x 2]> \n 9 Adelie  Biscoe    female  2008 <tibble [9 x 2]>  <tibble [9 x 2]> \n10 Adelie  Biscoe    male    2008 <tibble [9 x 2]>  <tibble [9 x 2]> \n# i 25 more rows\n```\n\n\n:::\n:::\n\n\n### Working with Nested Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply functions to nested data\nnested_summary <- nested_penguins %>%\n  mutate(\n    n_obs = map_int(data, nrow),\n    avg_mass = map_dbl(data, ~ mean(.$body_mass_g, na.rm = TRUE)),\n    mass_range = map_dbl(data, ~ diff(range(.$body_mass_g, na.rm = TRUE)))\n  )\nprint(\"Summary of nested data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary of nested data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnested_summary %>% select(-data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 5\n# Groups:   species, island [5]\n  species   island    n_obs avg_mass mass_range\n  <fct>     <fct>     <int>    <dbl>      <dbl>\n1 Adelie    Torgersen    52    3706.       1800\n2 Adelie    Biscoe       44    3710.       1925\n3 Adelie    Dream        56    3688.       1750\n4 Gentoo    Biscoe      124    5076.       2350\n5 Chinstrap Dream        68    3733.       2100\n```\n\n\n:::\n\n```{.r .cell-code}\n# Fit models to nested data\nnested_models <- nested_penguins %>%\n  mutate(\n    model = map(data, ~ lm(body_mass_g ~ flipper_length_mm, data = .)),\n    r_squared = map_dbl(model, ~ summary(.)$r.squared)\n  )\nprint(\"Models fitted to nested data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Models fitted to nested data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnested_models %>% select(-data, -model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 3\n# Groups:   species, island [5]\n  species   island    r_squared\n  <fct>     <fct>         <dbl>\n1 Adelie    Torgersen     0.190\n2 Adelie    Biscoe        0.277\n3 Adelie    Dream         0.212\n4 Gentoo    Biscoe        0.494\n5 Chinstrap Dream         0.412\n```\n\n\n:::\n:::\n\n\n### Unnesting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic unnest\nunnested <- nested_penguins %>%\n  unnest(data)\nprint(\"Unnested data (first 10 rows):\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Unnested data (first 10 rows):\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(unnested, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 8\n# Groups:   species, island [1]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# i 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Unnest with selection\npartial_unnest <- custom_nest %>%\n  unnest(bill_data) %>%\n  head(10)\nprint(\"Partial unnest:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Partial unnest:\"\n```\n\n\n:::\n\n```{.r .cell-code}\npartial_unnest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 7\n# Groups:   species [1]\n   species island    sex     year bill_length_mm bill_depth_mm body_data       \n   <fct>   <fct>     <fct>  <int>          <dbl>         <dbl> <list>          \n 1 Adelie  Torgersen male    2007           39.1          18.7 <tibble [7 x 2]>\n 2 Adelie  Torgersen male    2007           39.3          20.6 <tibble [7 x 2]>\n 3 Adelie  Torgersen male    2007           39.2          19.6 <tibble [7 x 2]>\n 4 Adelie  Torgersen male    2007           38.6          21.2 <tibble [7 x 2]>\n 5 Adelie  Torgersen male    2007           34.6          21.1 <tibble [7 x 2]>\n 6 Adelie  Torgersen male    2007           42.5          20.7 <tibble [7 x 2]>\n 7 Adelie  Torgersen male    2007           46            21.5 <tibble [7 x 2]>\n 8 Adelie  Torgersen female  2007           39.5          17.4 <tibble [8 x 2]>\n 9 Adelie  Torgersen female  2007           40.3          18   <tibble [8 x 2]>\n10 Adelie  Torgersen female  2007           36.7          19.3 <tibble [8 x 2]>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Unnest wider (for list columns with consistent structure)\nsummary_data <- nested_penguins %>%\n  mutate(\n    summary = map(data, ~ tibble(\n      mean_mass = mean(.$body_mass_g, na.rm = TRUE),\n      sd_mass = sd(.$body_mass_g, na.rm = TRUE),\n      n = n()\n    ))\n  ) %>%\n  select(-data) %>%\n  unnest_wider(summary)\nprint(\"Unnest wider:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Unnest wider:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 5\n# Groups:   species, island [5]\n  species   island    mean_mass sd_mass     n\n  <fct>     <fct>         <dbl>   <dbl> <int>\n1 Adelie    Torgersen     3706.    445.     1\n2 Adelie    Biscoe        3710.    488.     1\n3 Adelie    Dream         3688.    455.     1\n4 Gentoo    Biscoe        5076.    504.     1\n5 Chinstrap Dream         3733.    384.     1\n```\n\n\n:::\n:::\n\n\n## List Columns\n\n### Creating and Working with List Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create list columns\nlist_col_data <- tibble(\n  id = 1:3,\n  values = list(\n    c(1, 2, 3),\n    c(4, 5),\n    c(6, 7, 8, 9)\n  ),\n  metadata = list(\n    list(type = \"A\", quality = \"high\"),\n    list(type = \"B\", quality = \"medium\"),\n    list(type = \"A\", quality = \"low\")\n  )\n)\nprint(\"Data with list columns:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Data with list columns:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist_col_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n     id values    metadata        \n  <int> <list>    <list>          \n1     1 <dbl [3]> <named list [2]>\n2     2 <dbl [2]> <named list [2]>\n3     3 <dbl [4]> <named list [2]>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract from list columns\nextracted <- list_col_data %>%\n  mutate(\n    n_values = map_int(values, length),\n    sum_values = map_dbl(values, sum),\n    type = map_chr(metadata, \"type\"),\n    quality = map_chr(metadata, \"quality\")\n  )\nprint(\"Extracted values:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Extracted values:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nextracted %>% select(-values, -metadata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n     id n_values sum_values type  quality\n  <int>    <int>      <dbl> <chr> <chr>  \n1     1        3          6 A     high   \n2     2        2          9 B     medium \n3     3        4         30 A     low    \n```\n\n\n:::\n\n```{.r .cell-code}\n# Unnest list columns\nunnested_values <- list_col_data %>%\n  unnest(values) %>%\n  group_by(id) %>%\n  mutate(value_index = row_number())\nprint(\"Unnested values:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Unnested values:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nunnested_values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 x 4\n# Groups:   id [3]\n     id values metadata         value_index\n  <int>  <dbl> <list>                 <int>\n1     1      1 <named list [2]>           1\n2     1      2 <named list [2]>           2\n3     1      3 <named list [2]>           3\n4     2      4 <named list [2]>           1\n5     2      5 <named list [2]>           2\n6     3      6 <named list [2]>           1\n7     3      7 <named list [2]>           2\n8     3      8 <named list [2]>           3\n9     3      9 <named list [2]>           4\n```\n\n\n:::\n:::\n\n\n### Advanced List Column Operations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Store complex objects\nmodel_data <- penguins %>%\n  drop_na() %>%\n  group_by(species) %>%\n  nest() %>%\n  mutate(\n    # Fit different models\n    lm_model = map(data, ~ lm(body_mass_g ~ flipper_length_mm + bill_length_mm, data = .)),\n    # Extract coefficients\n    coefficients = map(lm_model, broom::tidy),\n    # Get predictions\n    predictions = map2(lm_model, data, ~ broom::augment(.x, newdata = .y))\n  )\n\n# View coefficients\ncoefficients_df <- model_data %>%\n  select(species, coefficients) %>%\n  unnest(coefficients)\nprint(\"Model coefficients:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Model coefficients:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncoefficients_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 x 6\n# Groups:   species [3]\n  species   term              estimate std.error statistic       p.value\n  <fct>     <chr>                <dbl>     <dbl>     <dbl>         <dbl>\n1 Adelie    (Intercept)        -3492.     890.       -3.93 0.000134     \n2 Adelie    flipper_length_mm     22.5      4.88      4.60 0.00000928   \n3 Adelie    bill_length_mm        75.5     12.0       6.31 0.00000000325\n4 Gentoo    (Intercept)        -5524.    1039.       -5.32 0.000000516  \n5 Gentoo    flipper_length_mm     36.6      6.18      5.92 0.0000000331 \n6 Gentoo    bill_length_mm        56.1     13.1       4.29 0.0000378    \n7 Chinstrap (Intercept)        -3212.     957.       -3.36 0.00132      \n8 Chinstrap flipper_length_mm     27.7      5.52      5.01 0.00000444   \n9 Chinstrap bill_length_mm        31.2     11.8       2.65 0.0101       \n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract R-squared values\nr_squared <- model_data %>%\n  mutate(r_squared = map_dbl(lm_model, ~ summary(.)$r.squared)) %>%\n  select(species, r_squared)\nprint(\"R-squared values:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"R-squared values:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nr_squared\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n# Groups:   species [3]\n  species   r_squared\n  <fct>         <dbl>\n1 Adelie        0.387\n2 Gentoo        0.573\n3 Chinstrap     0.469\n```\n\n\n:::\n:::\n\n\n## Expanding and Completing Data\n\n### expand(): All Combinations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create all combinations\nexperiment_design <- expand_grid(\n  treatment = c(\"Control\", \"Drug A\", \"Drug B\"),\n  dose = c(0, 10, 20, 50),\n  replicate = 1:3\n)\nprint(\"Experimental design:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Experimental design:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(experiment_design, 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 3\n   treatment  dose replicate\n   <chr>     <dbl>     <int>\n 1 Control       0         1\n 2 Control       0         2\n 3 Control       0         3\n 4 Control      10         1\n 5 Control      10         2\n 6 Control      10         3\n 7 Control      20         1\n 8 Control      20         2\n 9 Control      20         3\n10 Control      50         1\n11 Control      50         2\n12 Control      50         3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Expand existing data\nsales_data <- tibble(\n  store = c(\"A\", \"A\", \"B\"),\n  product = c(\"X\", \"Y\", \"X\"),\n  sales = c(100, 150, 120)\n)\n\nall_combinations <- sales_data %>%\n  expand(store, product)\nprint(\"All store-product combinations:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"All store-product combinations:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nall_combinations\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 2\n  store product\n  <chr> <chr>  \n1 A     X      \n2 A     Y      \n3 B     X      \n4 B     Y      \n```\n\n\n:::\n\n```{.r .cell-code}\n# Complete with defaults\ncomplete_sales <- sales_data %>%\n  complete(store, product, fill = list(sales = 0))\nprint(\"Complete sales data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Complete sales data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncomplete_sales\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 3\n  store product sales\n  <chr> <chr>   <dbl>\n1 A     X         100\n2 A     Y         150\n3 B     X         120\n4 B     Y           0\n```\n\n\n:::\n:::\n\n\n### crossing() and nesting()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crossing - all combinations\ncolors <- c(\"red\", \"blue\", \"green\")\nsizes <- c(\"S\", \"M\", \"L\")\n\ninventory <- crossing(\n  color = colors,\n  size = sizes\n) %>%\n  mutate(stock = sample(0:50, n(), replace = TRUE))\nprint(\"Inventory matrix:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Inventory matrix:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ninventory\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 x 3\n  color size  stock\n  <chr> <chr> <int>\n1 blue  L        30\n2 blue  M        14\n3 blue  S        50\n4 green L        13\n5 green M         2\n6 green S        41\n7 red   L        49\n8 red   M        42\n9 red   S        36\n```\n\n\n:::\n\n```{.r .cell-code}\n# Nesting - only observed combinations\nobserved_data <- tibble(\n  city = c(\"NYC\", \"NYC\", \"LA\", \"LA\", \"Chicago\"),\n  year = c(2020, 2021, 2020, 2021, 2021),\n  value = c(100, 110, 95, 105, 115)\n)\n\nnested_combos <- observed_data %>%\n  expand(nesting(city, year))\nprint(\"Nested combinations (only observed):\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Nested combinations (only observed):\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnested_combos\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 2\n  city     year\n  <chr>   <dbl>\n1 Chicago  2021\n2 LA       2020\n3 LA       2021\n4 NYC      2020\n5 NYC      2021\n```\n\n\n:::\n:::\n\n\n## Real-World Tidying Examples\n\n### Example 1: Survey Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Messy survey data\nsurvey_messy <- tibble(\n  respondent = c(\"R001\", \"R002\", \"R003\"),\n  `Q1_satisfied` = c(4, 5, 3),\n  `Q2_satisfied` = c(3, 4, 4),\n  `Q1_importance` = c(5, 5, 4),\n  `Q2_importance` = c(4, 3, 5),\n  age_gender = c(\"25_M\", \"30_F\", \"28_M\")\n)\n\n# Tidy the survey data\nsurvey_tidy <- survey_messy %>%\n  # Separate age and gender\n  separate(age_gender, into = c(\"age\", \"gender\"), sep = \"_\", convert = TRUE) %>%\n  # Pivot questions\n  pivot_longer(\n    cols = starts_with(\"Q\"),\n    names_to = c(\"question\", \"measure\"),\n    names_pattern = \"(.*)_(.*)\",\n    values_to = \"value\"\n  ) %>%\n  # Reshape to have satisfaction and importance as columns\n  pivot_wider(\n    names_from = measure,\n    values_from = value\n  )\n\nprint(\"Tidied survey data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tidied survey data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsurvey_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 6\n  respondent   age gender question satisfied importance\n  <chr>      <int> <chr>  <chr>        <dbl>      <dbl>\n1 R001          25 M      Q1               4          5\n2 R001          25 M      Q2               3          4\n3 R002          30 F      Q1               5          5\n4 R002          30 F      Q2               4          3\n5 R003          28 M      Q1               3          4\n6 R003          28 M      Q2               4          5\n```\n\n\n:::\n:::\n\n\n### Example 2: Time Series Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Messy time series\nts_messy <- tibble(\n  date_time = c(\"2023-01-15 10:30\", \"2023-01-15 14:45\", \"2023-01-16 09:15\"),\n  sensor_readings = c(\"temp:22.5;humidity:60\", \"temp:23.1;humidity:58\", \"temp:21.8;humidity:62\")\n)\n\n# Tidy the time series\nts_tidy <- ts_messy %>%\n  # Separate date and time\n  separate(date_time, into = c(\"date\", \"time\"), sep = \" \") %>%\n  # Separate sensor readings\n  separate_rows(sensor_readings, sep = \";\") %>%\n  separate(sensor_readings, into = c(\"sensor\", \"value\"), sep = \":\", convert = TRUE) %>%\n  # Convert date\n  mutate(date = as.Date(date))\n\nprint(\"Tidied time series:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tidied time series:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nts_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 4\n  date       time  sensor   value\n  <date>     <chr> <chr>    <dbl>\n1 2023-01-15 10:30 temp      22.5\n2 2023-01-15 10:30 humidity  60  \n3 2023-01-15 14:45 temp      23.1\n4 2023-01-15 14:45 humidity  58  \n5 2023-01-16 09:15 temp      21.8\n6 2023-01-16 09:15 humidity  62  \n```\n\n\n:::\n\n```{.r .cell-code}\n# Reshape for analysis\nts_wide <- ts_tidy %>%\n  pivot_wider(\n    names_from = sensor,\n    values_from = value\n  )\nprint(\"Wide format for analysis:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Wide format for analysis:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nts_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  date       time   temp humidity\n  <date>     <chr> <dbl>    <dbl>\n1 2023-01-15 10:30  22.5       60\n2 2023-01-15 14:45  23.1       58\n3 2023-01-16 09:15  21.8       62\n```\n\n\n:::\n:::\n\n\n### Example 3: Hierarchical Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hierarchical organization data\norg_data <- tibble(\n  employee = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\"),\n  department_division = c(\"Sales/North\", \"Sales/South\", \"IT/Infrastructure\", \"IT/Development\"),\n  metrics = c(\"revenue:1000000;satisfaction:4.5\", \n              \"revenue:800000;satisfaction:4.2\",\n              \"tickets:450;uptime:99.9\",\n              \"features:12;bugs:3\")\n)\n\n# Tidy hierarchical data\norg_tidy <- org_data %>%\n  # Separate hierarchy\n  separate(department_division, into = c(\"department\", \"division\"), sep = \"/\") %>%\n  # Separate metrics\n  separate_rows(metrics, sep = \";\") %>%\n  separate(metrics, into = c(\"metric\", \"value\"), sep = \":\", convert = TRUE)\n\nprint(\"Tidied organizational data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tidied organizational data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\norg_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 5\n  employee department division       metric           value\n  <chr>    <chr>      <chr>          <chr>            <dbl>\n1 Alice    Sales      North          revenue      1000000  \n2 Alice    Sales      North          satisfaction       4.5\n3 Bob      Sales      South          revenue       800000  \n4 Bob      Sales      South          satisfaction       4.2\n5 Charlie  IT         Infrastructure tickets          450  \n6 Charlie  IT         Infrastructure uptime            99.9\n7 Diana    IT         Development    features          12  \n8 Diana    IT         Development    bugs               3  \n```\n\n\n:::\n\n```{.r .cell-code}\n# Summarize by department\ndept_summary <- org_tidy %>%\n  group_by(department, metric) %>%\n  summarise(\n    total = sum(value),\n    avg = mean(value),\n    .groups = \"drop\"\n  ) %>%\n  pivot_wider(\n    names_from = metric,\n    values_from = c(total, avg),\n    names_glue = \"{metric}_{.value}\"\n  )\n\nprint(\"Department summary:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Department summary:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndept_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 13\n  department bugs_total features_total tickets_total uptime_total revenue_total\n  <chr>           <dbl>          <dbl>         <dbl>        <dbl>         <dbl>\n1 IT                  3             12           450         99.9            NA\n2 Sales              NA             NA            NA         NA         1800000\n# i 7 more variables: satisfaction_total <dbl>, bugs_avg <dbl>,\n#   features_avg <dbl>, tickets_avg <dbl>, uptime_avg <dbl>, revenue_avg <dbl>,\n#   satisfaction_avg <dbl>\n```\n\n\n:::\n:::\n\n\n## Exercises\n\n### Exercise 1: Complex Pivoting\n\nTransform this gradebook data into a tidy format suitable for analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Given messy gradebook\ngradebook <- tibble(\n  student = c(\"Alice\", \"Bob\", \"Charlie\"),\n  `Math_Midterm` = c(85, 90, 78),\n  `Math_Final` = c(88, 85, 82),\n  `Science_Midterm` = c(92, 88, 90),\n  `Science_Final` = c(90, 92, 88),\n  `attendance_days` = c(\"45/50\", \"48/50\", \"42/50\")\n)\n\n# Your solution\ntidy_gradebook <- gradebook %>%\n  # Separate attendance\n  separate(attendance_days, into = c(\"days_present\", \"total_days\"), \n           sep = \"/\", convert = TRUE) %>%\n  # Calculate attendance rate\n  mutate(attendance_rate = days_present / total_days) %>%\n  # Pivot grades\n  pivot_longer(\n    cols = matches(\"_Midterm|_Final\"),\n    names_to = c(\"subject\", \"exam\"),\n    names_sep = \"_\",\n    values_to = \"score\"\n  ) %>%\n  # Calculate average by subject\n  group_by(student, subject) %>%\n  mutate(subject_avg = mean(score)) %>%\n  ungroup()\n\nprint(\"Tidied gradebook:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tidied gradebook:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntidy_gradebook\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 8\n   student days_present total_days attendance_rate subject exam    score\n   <chr>          <int>      <int>           <dbl> <chr>   <chr>   <dbl>\n 1 Alice             45         50            0.9  Math    Midterm    85\n 2 Alice             45         50            0.9  Math    Final      88\n 3 Alice             45         50            0.9  Science Midterm    92\n 4 Alice             45         50            0.9  Science Final      90\n 5 Bob               48         50            0.96 Math    Midterm    90\n 6 Bob               48         50            0.96 Math    Final      85\n 7 Bob               48         50            0.96 Science Midterm    88\n 8 Bob               48         50            0.96 Science Final      92\n 9 Charlie           42         50            0.84 Math    Midterm    78\n10 Charlie           42         50            0.84 Math    Final      82\n11 Charlie           42         50            0.84 Science Midterm    90\n12 Charlie           42         50            0.84 Science Final      88\n# i 1 more variable: subject_avg <dbl>\n```\n\n\n:::\n:::\n\n\n### Exercise 2: Nested Data Analysis\n\nWork with nested gapminder data to calculate decade-wise trends:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your solution\ngapminder_nested <- gapminder %>%\n  mutate(decade = floor(year / 10) * 10) %>%\n  group_by(continent, decade) %>%\n  nest() %>%\n  mutate(\n    # Calculate trends within each group\n    avg_lifeExp = map_dbl(data, ~ mean(.$lifeExp)),\n    gdp_growth = map_dbl(data, ~ {\n      if(nrow(.) > 1) {\n        model <- lm(log(gdpPercap) ~ I(year - min(year)), data = .)\n        coef(model)[2] * 100  # Percent growth per year\n      } else {\n        NA_real_\n      }\n    }),\n    pop_total = map_dbl(data, ~ sum(.$pop) / 1e9),  # In billions\n    n_countries = map_int(data, ~ n_distinct(.$country))\n  )\n\ngapminder_summary <- gapminder_nested %>%\n  select(-data) %>%\n  arrange(continent, decade)\n\nprint(\"Decade-wise trends by continent:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Decade-wise trends by continent:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30 x 6\n# Groups:   continent, decade [30]\n   continent decade avg_lifeExp gdp_growth pop_total n_countries\n   <fct>      <dbl>       <dbl>      <dbl>     <dbl>       <int>\n 1 Africa      1950        40.2     1.88       0.502          52\n 2 Africa      1960        44.3     2.74       0.632          52\n 3 Africa      1970        48.5     0.619      0.813          52\n 4 Africa      1980        52.5    -1.05       1.07           52\n 5 Africa      1990        53.6     0.450      1.40           52\n 6 Africa      2000        54.1     2.38       1.76           52\n 7 Americas    1950        54.6     2.33       0.732          25\n 8 Americas    1960        59.4     2.45       0.914          25\n 9 Americas    1970        63.4     2.65       1.11           25\n10 Americas    1980        67.2    -0.0866     1.31           25\n# i 20 more rows\n```\n\n\n:::\n:::\n\n\n### Exercise 3: Complex Missing Data\n\nHandle this dataset with various types of missing data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dataset with complex missing patterns\ncomplex_missing <- tibble(\n  date = as.Date(c(\"2023-01-01\", \"2023-01-02\", \"2023-01-04\", \"2023-01-07\")),\n  store_a = c(100, NA, 120, 130),\n  store_b = c(200, 210, NA, NA),\n  store_c = c(150, 160, 170, 180)\n)\n\n# Your solution\n# Complete the date sequence\ncomplete_data <- complex_missing %>%\n  complete(date = seq.Date(min(date), max(date), by = \"day\"))\n\n# Different filling strategies\nfilled_data <- complete_data %>%\n  # Forward fill for store_a\n  fill(store_a, .direction = \"down\") %>%\n  # Interpolate store_b\n  mutate(\n    store_b = zoo::na.approx(store_b, na.rm = FALSE)\n  ) %>%\n  # Average fill for store_c\n  mutate(\n    store_c = if_else(is.na(store_c), \n                      mean(store_c, na.rm = TRUE), \n                      store_c)\n  )\n\nprint(\"Original data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Original data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncomplex_missing\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 4\n  date       store_a store_b store_c\n  <date>       <dbl>   <dbl>   <dbl>\n1 2023-01-01     100     200     150\n2 2023-01-02      NA     210     160\n3 2023-01-04     120      NA     170\n4 2023-01-07     130      NA     180\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(\"After handling missing values:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"After handling missing values:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nfilled_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 x 4\n  date       store_a store_b store_c\n  <date>       <dbl>   <dbl>   <dbl>\n1 2023-01-01     100     200     150\n2 2023-01-02     100     210     160\n3 2023-01-03     100      NA     165\n4 2023-01-04     120      NA     170\n5 2023-01-05     120      NA     165\n6 2023-01-06     120      NA     165\n7 2023-01-07     130      NA     180\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert to long format for analysis\nlong_filled <- filled_data %>%\n  pivot_longer(\n    cols = starts_with(\"store\"),\n    names_to = \"store\",\n    names_prefix = \"store_\",\n    values_to = \"sales\"\n  )\n\nprint(\"Long format for analysis:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Long format for analysis:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlong_filled\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 x 3\n   date       store sales\n   <date>     <chr> <dbl>\n 1 2023-01-01 a       100\n 2 2023-01-01 b       200\n 3 2023-01-01 c       150\n 4 2023-01-02 a       100\n 5 2023-01-02 b       210\n 6 2023-01-02 c       160\n 7 2023-01-03 a       100\n 8 2023-01-03 b        NA\n 9 2023-01-03 c       165\n10 2023-01-04 a       120\n# i 11 more rows\n```\n\n\n:::\n:::\n\n\n### Exercise 4: Real-World Data Cleaning\n\nClean and reshape this messy real-world dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Messy real-world data\nmessy_sales <- tibble(\n  id = c(\"US-2023-001\", \"UK-2023-002\", \"CA-2023-003\"),\n  jan_feb_mar = c(\"100,120,115\", \"200,210,205\", \"150,145,160\"),\n  apr_may_jun = c(\"125,130,135\", \"215,220,225\", \"165,170,175\"),\n  customer_info = c(\"John Doe|Premium\", \"Jane Smith|Standard\", \"Bob Johnson|Premium\"),\n  notes = c(\"Q1: Good performance\", \"Q1: Steady growth\", \"Q1: Meeting targets\")\n)\n\n# Your solution\nclean_sales <- messy_sales %>%\n  # Separate ID components\n  separate(id, into = c(\"country\", \"year\", \"customer_id\"), sep = \"-\", remove = FALSE) %>%\n  # Separate customer info\n  separate(customer_info, into = c(\"customer_name\", \"tier\"), sep = \"\\\\|\") %>%\n  # Pivot quarters\n  pivot_longer(\n    cols = c(jan_feb_mar, apr_may_jun),\n    names_to = \"quarter\",\n    values_to = \"monthly_sales\"\n  ) %>%\n  # Separate monthly sales\n  separate(monthly_sales, into = c(\"month1\", \"month2\", \"month3\"), sep = \",\", convert = TRUE) %>%\n  # Create proper quarter labels\n  mutate(\n    quarter = case_when(\n      quarter == \"jan_feb_mar\" ~ \"Q1\",\n      quarter == \"apr_may_jun\" ~ \"Q2\"\n    )\n  ) %>%\n  # Pivot months to long format\n  pivot_longer(\n    cols = starts_with(\"month\"),\n    names_to = \"month_num\",\n    names_prefix = \"month\",\n    values_to = \"sales\"\n  ) %>%\n  # Calculate month\n  mutate(\n    month_num = as.integer(month_num),\n    month = case_when(\n      quarter == \"Q1\" ~ month_num,\n      quarter == \"Q2\" ~ month_num + 3\n    ),\n    date = as.Date(paste(year, month, \"01\", sep = \"-\"))\n  ) %>%\n  select(id, country, date, customer_name, tier, sales, notes)\n\nprint(\"Cleaned sales data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Cleaned sales data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclean_sales\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 x 7\n   id          country date       customer_name tier     sales notes            \n   <chr>       <chr>   <date>     <chr>         <chr>    <int> <chr>            \n 1 US-2023-001 US      2023-01-01 John Doe      Premium    100 Q1: Good perform~\n 2 US-2023-001 US      2023-02-01 John Doe      Premium    120 Q1: Good perform~\n 3 US-2023-001 US      2023-03-01 John Doe      Premium    115 Q1: Good perform~\n 4 US-2023-001 US      2023-04-01 John Doe      Premium    125 Q1: Good perform~\n 5 US-2023-001 US      2023-05-01 John Doe      Premium    130 Q1: Good perform~\n 6 US-2023-001 US      2023-06-01 John Doe      Premium    135 Q1: Good perform~\n 7 UK-2023-002 UK      2023-01-01 Jane Smith    Standard   200 Q1: Steady growth\n 8 UK-2023-002 UK      2023-02-01 Jane Smith    Standard   210 Q1: Steady growth\n 9 UK-2023-002 UK      2023-03-01 Jane Smith    Standard   205 Q1: Steady growth\n10 UK-2023-002 UK      2023-04-01 Jane Smith    Standard   215 Q1: Steady growth\n11 UK-2023-002 UK      2023-05-01 Jane Smith    Standard   220 Q1: Steady growth\n12 UK-2023-002 UK      2023-06-01 Jane Smith    Standard   225 Q1: Steady growth\n13 CA-2023-003 CA      2023-01-01 Bob Johnson   Premium    150 Q1: Meeting targ~\n14 CA-2023-003 CA      2023-02-01 Bob Johnson   Premium    145 Q1: Meeting targ~\n15 CA-2023-003 CA      2023-03-01 Bob Johnson   Premium    160 Q1: Meeting targ~\n16 CA-2023-003 CA      2023-04-01 Bob Johnson   Premium    165 Q1: Meeting targ~\n17 CA-2023-003 CA      2023-05-01 Bob Johnson   Premium    170 Q1: Meeting targ~\n18 CA-2023-003 CA      2023-06-01 Bob Johnson   Premium    175 Q1: Meeting targ~\n```\n\n\n:::\n:::\n\n\n## Summary\n\nYou've mastered tidyr essentials:\n\n✅ Understanding tidy data principles  \n✅ Pivoting between wide and long formats  \n✅ Separating and uniting columns  \n✅ Handling missing values systematically  \n✅ Working with nested data and list columns  \n✅ Expanding and completing datasets  \n✅ Real-world data tidying techniques  \n\n## What's Next?\n\nIn [Chapter 5](05-visualization.Rmd), we'll explore data visualization with ggplot2, creating beautiful and informative graphics.\n\n## Additional Resources\n\n- [tidyr Documentation](https://tidyr.tidyverse.org/)\n- [Tidy Data Paper](https://www.jstatsoft.org/article/view/v059i10)\n- [tidyr Cheat Sheet](https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf)\n- [R for Data Science - Tidy Data](https://r4ds.had.co.nz/tidy-data.html)\n",
    "supporting": [
      "04-data-tidying_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}