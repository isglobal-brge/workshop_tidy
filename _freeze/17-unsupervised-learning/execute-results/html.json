{
  "hash": "5edc7cbc4598237e7746c9ecf10f5d3d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 17: Unsupervised Learning - Discovering Hidden Patterns\"\nauthor: \"David Sarrat González, Juan R González\"\ndate: today\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n---\n\n## Learning Objectives\n\nBy the end of this chapter, you will master:\n\n- The fundamentals of unsupervised learning\n- Clustering algorithms (K-means, hierarchical, DBSCAN)\n- Dimensionality reduction (PCA, t-SNE, UMAP)\n- Anomaly detection techniques\n- Market basket analysis and association rules\n- Practical implementation with tidymodels\n- Evaluating unsupervised models\n- Real-world applications\n\n## The Art of Finding Structure Without Labels\n\nImagine you're an explorer discovering a new continent. You have no map, no guide, just raw observations. Your task is to identify natural groupings - mountain ranges, river systems, ecosystems. This is the essence of unsupervised learning: finding structure in data without predefined categories.\n\nUnlike supervised learning where we have labels to guide us, unsupervised learning must discover patterns purely from the data itself. This makes it both challenging and powerful - we can uncover insights we didn't even know to look for.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching packages -------------------------------------- tidymodels 1.4.1 --\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nv broom        1.0.10     v recipes      1.3.1 \nv dials        1.4.2      v rsample      1.3.1 \nv dplyr        1.1.4      v tailor       0.1.0 \nv ggplot2      4.0.0      v tidyr        1.3.1 \nv infer        1.0.9      v tune         2.0.0 \nv modeldata    1.5.1      v workflows    1.3.0 \nv parsnip      1.3.3      v workflowsets 1.1.1 \nv purrr        1.1.0      v yardstick    1.3.2 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Conflicts ----------------------------------------- tidymodels_conflicts() --\nx purrr::discard() masks scales::discard()\nx dplyr::filter()  masks stats::filter()\nx dplyr::lag()     masks stats::lag()\nx recipes::step()  masks stats::step()\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv forcats   1.0.0     v stringr   1.5.2\nv lubridate 1.9.4     v tibble    3.3.0\nv readr     2.1.5     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx readr::col_factor() masks scales::col_factor()\nx purrr::discard()    masks scales::discard()\nx dplyr::filter()     masks stats::filter()\nx stringr::fixed()    masks recipes::fixed()\nx dplyr::lag()        masks stats::lag()\nx readr::spec()       masks yardstick::spec()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyclust)  # For clustering with tidymodels\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAdjuntando el paquete: 'tidyclust'\n\nThe following objects are masked from 'package:parsnip':\n\n    knit_engine_docs, list_md_problems\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(cluster)    # For clustering algorithms\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAdjuntando el paquete: 'cluster'\n\nThe following object is masked from 'package:tidyclust':\n\n    silhouette\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(factoextra) # For visualization\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWelcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dendextend) # For dendrograms\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n---------------------\nWelcome to dendextend version 1.19.1\nType citation('dendextend') for how to cite the package.\n\nType browseVignettes(package = 'dendextend') for the package vignette.\nThe github page is: https://github.com/talgalili/dendextend/\n\nSuggestions and bug-reports can be submitted at: https://github.com/talgalili/dendextend/issues\nYou may ask questions at stackoverflow, use the r and dendextend tags: \n\t https://stackoverflow.com/questions/tagged/dendextend\n\n\tTo suppress this message use:  suppressPackageStartupMessages(library(dendextend))\n---------------------\n\n\nAdjuntando el paquete: 'dendextend'\n\nThe following object is masked from 'package:dials':\n\n    prune\n\nThe following object is masked from 'package:stats':\n\n    cutree\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dbscan)     # For DBSCAN\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAdjuntando el paquete: 'dbscan'\n\nThe following object is masked from 'package:stats':\n\n    as.dendrogram\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggfortify)  # For PCA plots\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'ggfortify':\n  method          from   \n  autoplot.glmnet parsnip\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(plotly)     # For 3D visualizations\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAdjuntando el paquete: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(corrplot)   # For correlation plots\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ncorrplot 0.95 loaded\n```\n\n\n:::\n\n```{.r .cell-code}\n# Set theme and seed\ntheme_set(theme_minimal())\nset.seed(123)\n\n# Load data\ndata(ames)\n\n# Prepare data for unsupervised learning\names_numeric <- ames %>%\n  select(where(is.numeric)) %>%\n  select(-Sale_Price) %>%  # Remove target for unsupervised learning\n  na.omit() %>%\n  slice_sample(n = 500)  # Sample for computational efficiency\n```\n:::\n\n\n## Clustering: Finding Natural Groups\n\n### K-Means Clustering\n\nK-means is the workhorse of clustering algorithms. It partitions data into K clusters by minimizing within-cluster variance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare data for clustering\nclustering_data <- ames_numeric %>%\n  select(Gr_Liv_Area, Lot_Area, Year_Built, Total_Bsmt_SF, Garage_Area)\n\n# Scale the data (crucial for distance-based methods!)\nscaled_data <- scale(clustering_data)\n\n# Determine optimal number of clusters using elbow method\nwss <- map_dbl(1:10, function(k) {\n  kmeans(scaled_data, centers = k, nstart = 25)$tot.withinss\n})\n\nelbow_data <- tibble(k = 1:10, wss = wss)\n\nggplot(elbow_data, aes(x = k, y = wss)) +\n  geom_line(linewidth = 1) +\n  geom_point(size = 3) +\n  geom_vline(xintercept = 4, linetype = \"dashed\", color = \"red\") +\n  labs(\n    title = \"Elbow Method for Optimal K\",\n    subtitle = \"Look for the 'elbow' where WSS decrease slows\",\n    x = \"Number of Clusters (k)\",\n    y = \"Total Within-Cluster Sum of Squares\"\n  )\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Silhouette analysis for cluster validation\nsilhouette_scores <- map_dbl(2:10, function(k) {\n  km <- kmeans(scaled_data, centers = k, nstart = 25)\n  ss <- silhouette(km$cluster, dist(scaled_data))\n  mean(ss[, 3])\n})\n\nsilhouette_data <- tibble(k = 2:10, silhouette = silhouette_scores)\n\nggplot(silhouette_data, aes(x = k, y = silhouette)) +\n  geom_line(linewidth = 1) +\n  geom_point(size = 3) +\n  geom_vline(xintercept = which.max(silhouette_scores) + 1, \n             linetype = \"dashed\", color = \"blue\") +\n  labs(\n    title = \"Silhouette Analysis\",\n    subtitle = \"Higher values indicate better-defined clusters\",\n    x = \"Number of Clusters (k)\",\n    y = \"Average Silhouette Score\"\n  )\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Perform K-means with optimal k=4\nkm_result <- kmeans(scaled_data, centers = 4, nstart = 25)\n\n# Add cluster assignments back to data\nclustered_data <- clustering_data %>%\n  mutate(cluster = factor(km_result$cluster))\n\n# Visualize clusters\np1 <- ggplot(clustered_data, aes(x = Gr_Liv_Area, y = Lot_Area, \n                                  color = cluster)) +\n  geom_point(size = 2, alpha = 0.7) +\n  labs(title = \"Clusters: Living Area vs Quality\")\n\np2 <- ggplot(clustered_data, aes(x = Year_Built, y = Total_Bsmt_SF, \n                                  color = cluster)) +\n  geom_point(size = 2, alpha = 0.7) +\n  labs(title = \"Clusters: Year vs Basement\")\n\nlibrary(patchwork)\np1 + p2\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Cluster characteristics\ncluster_profiles <- clustered_data %>%\n  group_by(cluster) %>%\n  summarise(across(everything(), list(mean = mean, sd = sd)), \n            count = n()) %>%\n  pivot_longer(cols = -c(cluster, count),\n               names_to = c(\"variable\", \"stat\"),\n               names_sep = \"_(?=mean|sd)\") %>%\n  pivot_wider(names_from = stat, values_from = value)\n\nknitr::kable(cluster_profiles, digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n|cluster | count|variable      |     mean|       sd|\n|:-------|-----:|:-------------|--------:|--------:|\n|1       |     8|Gr_Liv_Area   |  2513.38|   925.13|\n|1       |     8|Lot_Area      | 56046.50| 24669.55|\n|1       |     8|Year_Built    |  1984.50|    17.14|\n|1       |     8|Total_Bsmt_SF |  1550.62|   764.04|\n|1       |     8|Garage_Area   |   793.00|   181.72|\n|2       |   175|Gr_Liv_Area   |  1296.11|   409.47|\n|2       |   175|Lot_Area      |  8466.14|  3142.00|\n|2       |   175|Year_Built    |  1937.54|    20.35|\n|2       |   175|Total_Bsmt_SF |   784.01|   293.47|\n|2       |   175|Garage_Area   |   294.43|   166.78|\n|3       |   236|Gr_Liv_Area   |  1397.47|   306.68|\n|3       |   236|Lot_Area      |  9413.75|  4132.14|\n|3       |   236|Year_Built    |  1986.24|    17.40|\n|3       |   236|Total_Bsmt_SF |  1065.54|   295.28|\n|3       |   236|Garage_Area   |   487.47|   131.59|\n|4       |    81|Gr_Liv_Area   |  2146.53|   465.84|\n|4       |    81|Lot_Area      | 13104.25|  4393.41|\n|4       |    81|Year_Built    |  1991.11|    21.57|\n|4       |    81|Total_Bsmt_SF |  1577.49|   436.29|\n|4       |    81|Garage_Area   |   752.70|   171.67|\n\n\n:::\n:::\n\n\nThe mathematics of K-means:\n- **Objective**: Minimize $\\sum_{i=1}^{k} \\sum_{x \\in C_i} ||x - \\mu_i||^2$\n- **Algorithm**: Iteratively assign points and update centroids\n- **Assumptions**: Spherical clusters, similar sizes, similar densities\n\n### Hierarchical Clustering\n\nHierarchical clustering builds a tree of clusters, allowing exploration at different granularities:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distance matrix\ndist_matrix <- dist(scaled_data, method = \"euclidean\")\n\n# Perform hierarchical clustering with different linkage methods\nhc_complete <- hclust(dist_matrix, method = \"complete\")\nhc_average <- hclust(dist_matrix, method = \"average\")\nhc_ward <- hclust(dist_matrix, method = \"ward.D2\")\n\n# Compare dendrograms\npar(mfrow = c(1, 3))\nplot(hc_complete, main = \"Complete Linkage\", labels = FALSE, xlab = \"\")\nplot(hc_average, main = \"Average Linkage\", labels = FALSE, xlab = \"\")\nplot(hc_ward, main = \"Ward's Method\", labels = FALSE, xlab = \"\")\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1))\n\n# Use Ward's method (often gives best results)\nhc_clusters <- cutree(hc_ward, k = 4)\n\n# Create a prettier dendrogram\ndend <- as.dendrogram(hc_ward)\ndend <- color_branches(dend, k = 4)\n\nplot(dend, main = \"Hierarchical Clustering Dendrogram\",\n     leaflab = \"none\", ylab = \"Height\")\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Compare with K-means\nclustering_comparison <- tibble(\n  kmeans = km_result$cluster,\n  hierarchical = hc_clusters\n)\n\n# Confusion matrix between methods\ntable(clustering_comparison$kmeans, clustering_comparison$hierarchical)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n      1   2   3   4\n  1   0   0   0   8\n  2   0  63 110   2\n  3   3 229   1   3\n  4  66  12   1   2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize both clustering results\ncomparison_data <- clustering_data %>%\n  mutate(\n    kmeans = factor(km_result$cluster),\n    hierarchical = factor(hc_clusters)\n  )\n\np1 <- ggplot(comparison_data, aes(x = Gr_Liv_Area, y = Lot_Area, \n                                   color = kmeans)) +\n  geom_point(size = 2) +\n  labs(title = \"K-Means Clustering\")\n\np2 <- ggplot(comparison_data, aes(x = Gr_Liv_Area, y = Lot_Area, \n                                   color = hierarchical)) +\n  geom_point(size = 2) +\n  labs(title = \"Hierarchical Clustering\")\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n:::\n\n\n### DBSCAN: Density-Based Clustering\n\nDBSCAN finds clusters of arbitrary shape and identifies outliers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data with non-spherical clusters\nset.seed(456)\nmoon_data <- rbind(\n  # First crescent\n  tibble(\n    x = cos(seq(0, pi, length.out = 100)) + rnorm(100, sd = 0.1),\n    y = sin(seq(0, pi, length.out = 100)) + rnorm(100, sd = 0.1),\n    true_cluster = 1\n  ),\n  # Second crescent (shifted and flipped)\n  tibble(\n    x = 1 - cos(seq(0, pi, length.out = 100)) + rnorm(100, sd = 0.1),\n    y = -0.5 - sin(seq(0, pi, length.out = 100)) + rnorm(100, sd = 0.1),\n    true_cluster = 2\n  ),\n  # Noise points\n  tibble(\n    x = runif(20, -1, 2),\n    y = runif(20, -2, 1),\n    true_cluster = 0\n  )\n)\n\n# Try K-means (will fail on non-spherical clusters)\nkm_moon <- kmeans(moon_data[, c(\"x\", \"y\")], centers = 2)\n\n# DBSCAN\ndb_result <- dbscan(moon_data[, c(\"x\", \"y\")], eps = 0.3, minPts = 5)\n\n# Compare results\nmoon_results <- moon_data %>%\n  mutate(\n    kmeans = factor(km_moon$cluster),\n    dbscan = factor(db_result$cluster)\n  )\n\np1 <- ggplot(moon_results, aes(x = x, y = y, color = factor(true_cluster))) +\n  geom_point(size = 2) +\n  labs(title = \"True Clusters\", color = \"Cluster\") +\n  scale_color_manual(values = c(\"0\" = \"gray\", \"1\" = \"blue\", \"2\" = \"red\"))\n\np2 <- ggplot(moon_results, aes(x = x, y = y, color = kmeans)) +\n  geom_point(size = 2) +\n  labs(title = \"K-Means Result\", color = \"Cluster\")\n\np3 <- ggplot(moon_results, aes(x = x, y = y, color = dbscan)) +\n  geom_point(size = 2) +\n  labs(title = \"DBSCAN Result\", color = \"Cluster\") +\n  scale_color_manual(values = c(\"0\" = \"gray\", \"1\" = \"blue\", \"2\" = \"red\"))\n\np1 + p2 + p3\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Apply DBSCAN to housing data\n# Find optimal eps using k-nearest neighbor distance\nknn_dist <- kNNdist(scaled_data, k = 5)\nknn_dist_sorted <- sort(knn_dist)\n\nplot(knn_dist_sorted, type = \"l\",\n     main = \"K-NN Distance Plot for eps Selection\",\n     xlab = \"Points sorted by distance\",\n     ylab = \"5-NN Distance\")\nabline(h = 1.5, col = \"red\", lty = 2)\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Apply DBSCAN\ndb_housing <- dbscan(scaled_data, eps = 1.5, minPts = 5)\n\n# Analyze results\ndbscan_summary <- tibble(\n  cluster = db_housing$cluster\n) %>%\n  count(cluster) %>%\n  mutate(\n    type = if_else(cluster == 0, \"Noise\", paste(\"Cluster\", cluster))\n  )\n\nknitr::kable(dbscan_summary)\n```\n\n::: {.cell-output-display}\n\n\n| cluster|   n|type      |\n|-------:|---:|:---------|\n|       0|  18|Noise     |\n|       1| 482|Cluster 1 |\n\n\n:::\n:::\n\n\n## Dimensionality Reduction\n\n### Principal Component Analysis (PCA)\n\nPCA finds the directions of maximum variance in high-dimensional data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform PCA\npca_result <- prcomp(scaled_data, center = FALSE, scale. = FALSE)\n\n# Variance explained\nvariance_explained <- tibble(\n  PC = paste0(\"PC\", 1:length(pca_result$sdev)),\n  var_explained = pca_result$sdev^2 / sum(pca_result$sdev^2),\n  cumulative_var = cumsum(var_explained)\n)\n\nggplot(variance_explained[1:10, ], aes(x = PC, y = var_explained)) +\n  geom_col(fill = \"steelblue\") +\n  geom_line(aes(y = cumulative_var, group = 1), color = \"red\", linewidth = 1) +\n  geom_point(aes(y = cumulative_var), color = \"red\", size = 2) +\n  labs(\n    title = \"PCA: Variance Explained\",\n    subtitle = \"Red line shows cumulative variance\",\n    x = \"Principal Component\",\n    y = \"Proportion of Variance\"\n  ) +\n  scale_y_continuous(sec.axis = sec_axis(~., name = \"Cumulative Variance\"))\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Biplot: variables and observations\nautoplot(pca_result, data = clustered_data, colour = 'cluster',\n         loadings = TRUE, loadings.label = TRUE,\n         loadings.label.size = 3) +\n  labs(title = \"PCA Biplot with Clusters\")\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Interpret principal components\nloadings <- as.data.frame(pca_result$rotation[, 1:3])\nloadings$variable <- rownames(loadings)\n\nloadings_long <- loadings %>%\n  pivot_longer(cols = PC1:PC3, names_to = \"PC\", values_to = \"loading\")\n\nggplot(loadings_long, aes(x = variable, y = loading, fill = variable)) +\n  geom_col() +\n  facet_wrap(~PC) +\n  coord_flip() +\n  labs(\n    title = \"PCA Loadings\",\n    subtitle = \"Variable contributions to each principal component\",\n    x = \"Variable\",\n    y = \"Loading\"\n  ) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Use PCA for visualization\npca_data <- as.data.frame(pca_result$x[, 1:3]) %>%\n  mutate(cluster = clustered_data$cluster)\n\n# 2D visualization\nggplot(pca_data, aes(x = PC1, y = PC2, color = cluster)) +\n  geom_point(size = 2, alpha = 0.7) +\n  stat_ellipse(level = 0.95) +\n  labs(\n    title = \"Clusters in PCA Space\",\n    subtitle = \"First two principal components\",\n    x = paste0(\"PC1 (\", round(variance_explained$var_explained[1] * 100, 1), \"%)\"),\n    y = paste0(\"PC2 (\", round(variance_explained$var_explained[2] * 100, 1), \"%)\")\n  )\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-5-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# 3D visualization with plotly\nplot_ly(pca_data, x = ~PC1, y = ~PC2, z = ~PC3, color = ~cluster,\n        type = \"scatter3d\", mode = \"markers\",\n        marker = list(size = 5)) %>%\n  layout(title = \"3D PCA Visualization\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-17463b260dfe37c51cd3\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-17463b260dfe37c51cd3\">{\"x\":{\"visdat\":{\"1093a68d8c5f8\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1093a68d8c5f8\",\"attrs\":{\"1093a68d8c5f8\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers\",\"marker\":{\"size\":5},\"color\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"3D PCA Visualization\",\"scene\":{\"xaxis\":{\"title\":\"PC1\"},\"yaxis\":{\"title\":\"PC2\"},\"zaxis\":{\"title\":\"PC3\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[3.2423336615018519,6.415277088915655,5.177956224419952,6.2116319660893922,4.1142552629900111,5.5041288847430865,2.1936833858777423,2.7395648992156163],\"y\":[3.3324866670525499,2.5513634895235735,2.6105973365069408,8.9646159559978482,2.9948282322342958,3.8519223533789693,2.5268847816178339,5.2744566903978303],\"z\":[-3.2302620979715004,-2.6713980846347125,0.55084998422040465,-8.1426633662423633,-2.8590223634330343,-1.3406843732308107,-2.4141257113054357,0.73095633924709047],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"size\":5,\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"type\":\"scatter3d\",\"name\":\"1\",\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"line\":{\"color\":\"rgba(102,194,165,1)\"},\"frame\":null},{\"x\":[-1.9902090154192975,-1.2158679789716731,-0.90471641261270619,-1.3546100706619828,-1.7950439376979066,-1.8960036944116421,-2.040362499305544,-0.68100230254909411,-0.85841612247333909,-0.98616181235047962,-0.86552462804098107,-0.75630760047790835,-0.86717639416617565,-0.85777775188576111,-1.5375846416466217,-1.2661405251765867,0.36410683769201435,-1.2195188413216287,-1.6202966798050731,-1.3746365194042147,-2.2048051540736888,-0.95261686707424476,-1.0710996997473887,-2.8701186518755821,-1.0855100044244381,-3.0602617701747681,-1.187580400281488,-3.0308153235641977,-1.3316450898176346,-0.85548599869098452,-1.1977447266875314,-0.75022409902796849,-1.4399346698278062,-0.78309796292859835,-1.687017843111942,-1.0521988639387703,0.069677992254304363,-1.1430280800058319,-1.4794339705341755,-1.9704028468210883,-1.2587802998783126,-0.72467949604809156,-2.8761414527020746,-0.40748818693360167,-1.3934990777124541,-1.8303683524117567,-2.9806996674851263,-1.2590228563743298,-2.2343218755469882,-0.49303085453716722,-1.323614083938033,-2.2663117991085908,-0.85638484040838725,-0.62464418679201605,-0.75865239511201343,-1.4724355785590342,-1.534137920239508,-1.1835039653155053,0.11575056484118544,-1.8925488736809266,-0.21769234124503764,-0.18717844258868144,-1.1074346580685492,-1.8640227436872352,-1.601468447443761,-1.1942649818247846,-2.1211772602179781,-1.9222787074539387,-2.5762751683295719,-1.5844770870332627,-1.6838584159777819,-1.3496077541095688,0.19924793359486079,-1.8348665281002943,-2.1430838792093376,-1.3091536942648041,-1.9014290591852478,-0.053429810285664826,-1.8525847012116228,-0.77572150568763887,-1.01461349446231,-2.6344112214679662,-1.8869573686859615,-0.95353113659589472,-1.5288255676578455,-1.7478316056220708,-0.92491682415340903,-3.103093543552669,-2.1865843333636779,-3.2081218904370887,-2.1383248415740637,-1.8619495751985264,-0.89416147019136083,-0.1255572408196142,-1.8944607338600883,-1.9549655439782552,-0.94615708527665199,-1.6780603618085408,-1.4862049496793874,-1.6881222818776869,-1.0775746726425357,-0.99467278636954015,-1.4897769974788637,-2.0038103129367926,-1.0269294655682435,-0.87727688022406802,-1.0717874875152815,-1.1827280632631942,-1.1261739648210907,-0.062058952280570692,-1.3479708897980218,-3.2687339351727212,-1.7036363125764937,-2.087783693145933,-2.0297822866261748,-1.0272899489176002,-1.9188962141880046,-1.2889610530302293,-2.0271934505539195,-1.2013822064996655,-1.1861744848345734,-0.15001897364685121,-1.7853141910086276,-0.58730677984564739,-0.76333627590410047,-1.4555344750684962,-2.2813845635956604,-1.0590923484686912,-1.5031073564793187,-2.4477856888480627,-0.73926622154362187,-2.1782454095645463,-1.9030864678739694,-0.9007664812851226,-1.3059935336608823,-1.2083978467354948,-0.11515607996090517,-1.0497780036694502,-2.1391860113954291,-1.7184581912731576,-0.62405612693191881,-1.6852045534960463,-2.8745886966560703,-3.3786847695388293,-1.6495486470284728,-1.597529820219399,-0.83047819348038476,-0.9247154374229275,-0.53000064835301519,-2.6508186543071126,-2.6986173842204755,-0.63541553549605112,-1.3714940482579729,-0.77140564490818997,-2.4251819826447347,-0.9113494168613977,-2.5867788822336295,-0.37704902222556785,-1.9150973739563362,-1.1117480646145639,-0.070730128849168572,-0.36329449862663948,-1.1146616476415403,-1.1274035405491463,-2.6802147513213472,-2.8075492473643284,-0.94774482723445164,-1.573424750841468,-1.9682934774474812,-0.95035378572394125,-0.54857804589845904,-1.4829926916184855,-1.5501287695062009,-1.8078609121925289,-1.7765674000601914],\"y\":[0.27765680389625141,0.25928668845580677,-0.2654742451054613,0.73483502871627804,0.43567471962752718,0.019774170126119657,1.1914624700224421,1.0555362281024911,-0.17905620862691038,-0.19132008026904587,0.25048881385476512,1.5496910646699815,-0.18934686125761718,-0.18513733815425845,1.1169202304851626,-0.071089716655193605,0.89953069129810925,1.8694492385925421,0.49917650090559229,1.6370387287354848,0.44360801892893237,-0.29458257816367922,1.0560475974007753,0.39687030821433567,0.34566881576821129,0.61517858171549078,-0.091656237348860373,0.28327222958989767,-0.032294387342526321,-0.25893408789477612,0.15553173198148654,0.56171100496052273,1.2264080142980549,0.54833754099208665,-0.87194614542327586,0.042569329490076212,1.4151938584088104,0.10016808202551862,0.76754723198532737,0.92873240038440541,1.1052947633403396,0.51272783594509752,-0.19290383426793029,0.42849915501101954,-0.26782414321980474,0.42739876593723886,0.22516321811285828,0.65868535096228953,0.54853952140572049,1.527893570050376,0.089583042367907498,0.58408085515804142,0.055193130006300661,0.20470817524942436,0.50151279676791083,0.81347730170573374,-0.058366834835109016,0.079569596644178911,2.4336763654808848,-0.15472306293317215,1.3263347432436807,1.5884293308371098,1.4408282949688851,0.17560485343467924,0.3409986430809881,-0.12739644513852713,1.0063609031444689,0.74181635910006227,1.4110724678224789,0.65524077858109875,-0.50539768674283803,-0.59307061473229283,1.8056889831730274,-0.80955359689963646,0.40235359068383786,0.15915568203031841,0.074777873952069362,2.1118493978759014,0.94829887653475808,-0.23205266779712719,0.11630048396747951,0.26621147516497023,0.7963852134836944,1.627692233980276,-0.47953489961605811,0.87916262470642725,0.24703514044638505,0.86252148249726346,-0.14701967750502848,0.58526545640231786,1.0050697256914354,0.4846864593193565,0.825811972252249,0.81219350711088489,0.44295876546622948,0.6610105063363183,3.96869891918583,0.28223219208497524,0.6639720109942121,1.1091073140228414,0.24380504828238639,0.188788115551276,0.77525275635510382,-0.86866400750698058,1.45316076216528,-0.029410927224997222,0.6417003187622583,0.34744622798750391,0.07966860276219713,0.60886784126450488,-0.36208115944189023,0.76455151793226916,-0.79052324501198701,0.82851476924832235,2.1648626749424813,0.35009465541414431,0.57351056654521815,1.0081735644273755,1.74607145584707,-0.11489704320015343,0.66919101084902977,0.72210634970402077,1.415869723622982,0.057984879993171055,1.477440060257214,1.297791943672238,-0.2994147920152947,-0.15757112665477457,0.43985095700973414,-0.63511732535410204,0.55925124474055976,0.20232930794241266,-0.36650161786956603,0.44286576362743219,0.2901201495986368,-0.051574116850545117,2.3770231639479609,0.22008246466797282,0.29569450082534665,1.328079267987273,0.16259726448097048,0.16873100418030654,0.86842107443451799,1.0888671535239898,0.36514585769856917,0.30325726997252783,-0.044323808104774022,-0.027633002480275917,1.1823663772268247,0.099056907400715627,0.19614190631991352,1.0563503274440713,0.9053474484890891,0.45195447056680249,0.77459897377182385,-0.30872552458926089,1.5699124391475705,0.40458559677840267,1.4497455444108853,-0.091883191091945357,0.53483984155621334,0.66734594445034989,0.9113584715648666,1.2496907606130636,0.71655395150045553,1.221859303048451,-0.024409485121040599,1.0659994580650789,-0.84309644887323654,0.67731041420454108,1.0353544939712889,0.71232959008193131,0.48803259863252951,0.64729715260353771,0.85404935788519976],\"z\":[0.13894841868534694,-0.031041908450256527,-0.2784855673344932,-0.26946034210038844,0.55625375697779023,-0.29906683738324674,0.027402815880512136,0.84616951579874666,-0.60410933668514422,-0.66218683481768126,-0.80847734292136864,1.387404733575039,-0.31868043142395341,-0.32909654715520376,0.59735289995543472,-0.39435402880776527,0.87936555307423714,1.3653006724184891,-0.1066631141941851,1.1198019966580266,-0.50949147672760409,0.41624917488573387,1.2898817232952313,-0.42734338811556422,-0.81028334486852616,-0.067883881674949548,-0.38142128962970767,0.041159818606374209,-0.75614445077336589,-0.25335256387261756,-0.49493006412649881,0.12842386922085483,0.52979958481855016,-0.70744814920931598,0.12061292604279027,-0.58730195493803572,1.8910826143630139,-0.70512447255274846,0.82618286093215942,0.66631655888147545,0.27704687995327609,-0.059109378099679713,-0.66750829193719508,0.79990727815844476,-0.52691284486978573,-0.45235590410983589,-0.19159483512886447,0.681696104375905,-0.67114987981074037,1.6130978834517431,0.29806223977652824,-0.3534226562362538,-0.54668600028990477,0.32174373429605313,0.81495259988315405,0.42472099770404015,-0.3223153669577119,-0.32847234609959636,2.4422977510601602,-0.20186985561522178,0.9716058237098999,1.6799721317171117,0.7819967356628057,0.28798841729336316,0.080139482355284217,-0.32675613375404311,0.29802986270271564,0.50239803091584123,0.16141776501303537,0.19484783193653207,-0.43504320678125952,-0.76719912588910388,2.2673255142921902,0.16750196205627871,0.015408664304139594,-0.14383807655734274,-0.64459349175549974,1.9530100632357223,0.92519078722336801,-0.21048270823305928,-1.0660152947378521,-0.013443749012754653,-0.99407823550015595,1.0434026062818977,-0.54297442625623438,-0.12264907123206011,0.56686052454999269,0.033514999352943241,-0.42479953024292638,-0.17205895228685156,0.25485953819853885,-0.65357091014692736,0.17694322155599987,1.408365548003051,0.22954267351953403,0.56684217132723203,0.6665555922189913,-0.81765455849538882,0.9476067543954978,0.37434654660536776,0.35853783258247707,-0.056045609335950701,-0.092501254211512465,-0.01617206873984818,0.68596318738307771,0.01580766220519773,0.45994483235052813,0.32972340046804155,0.079519662401519656,1.1190822427371725,-0.7461531027902345,-0.96065321909979684,0.21549865141864435,-0.39638851341555936,1.2910060718092471,0.59259057110742752,0.39337424379763358,-0.47637266890573282,0.19591263379384258,-0.069869366430475532,0.29417746845943304,0.3354067017161716,1.5499381959460812,-0.04758273965538614,0.95889711215173323,0.81110758661629345,-0.57729059434727326,-0.20523203087201305,0.072051005023302431,-0.023115645606930725,0.39905025991553933,-0.80782416440080429,-1.0919112457889368,-0.31560550838741774,0.030036614459630684,-0.33807811406017935,-0.69137878606042946,0.20615006654675758,-0.86459123185691711,0.74714698808219748,-0.18117596698847929,-0.47091676267213967,0.42059500400114935,-0.15628488495160406,0.3842633651860296,-0.15038197224278238,-0.17428765186439729,-0.83072429931258884,1.3257768189547008,-0.85308956033630134,-0.10471996501282636,0.61254700198988565,0.34210334046952934,0.50074057921462012,-0.30426892903217623,-0.26859211648680587,0.41786272663496421,0.38711622553137387,1.2068772841203528,-0.38035924011626199,1.1642808127029933,1.3073878334417901,0.81930715390578579,0.33681717228251318,0.065163364643858177,0.46500671147324518,-0.50420125320396336,0.4193334876582806,0.037208878115592744,-0.13066753553434804,0.82757271824259415,0.50165257409010533,0.14107234689071582,0.17404825142387151,1.0747662814043657],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"size\":5,\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"type\":\"scatter3d\",\"name\":\"2\",\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"line\":{\"color\":\"rgba(252,141,98,1)\"},\"frame\":null},{\"x\":[-0.32526970644226061,-0.38071937283547519,1.0295408154063008,-0.41434949842365976,-0.026728185509149783,1.4800932987353683,-0.74554816343768637,1.0639383761279366,-0.16905807989817298,0.88369609215065026,0.95959238063826435,-0.059422715087854829,0.0007724880269754014,-1.2066476519006821,1.3506571397087381,-0.50408569628021216,0.63086307265003716,-0.36061683730420502,0.814867389017912,0.11918387817969099,-0.53606166945529388,-0.63535959653418284,1.0327209387493594,-0.47270148639748644,0.041042915728094362,0.66969664336805068,0.14563463780052163,-0.4469437714706791,-0.47786257041225272,1.273048023998735,-0.064084190559259152,0.25908549903263539,1.1945873642816789,-0.23531861879864832,-0.18173014596562678,0.64763833228422052,0.48658176505783246,0.6804154222371398,-0.24317277805518198,-0.062114945379052079,-0.051199605096592472,0.70918295551542354,-0.17957317507489559,-0.85444559354232097,-0.91881229050082081,0.44955748861616757,-0.27953405789645375,0.19084455822675517,0.72057969134541922,-0.12777756755121661,-0.36556913552711801,0.29040075353296108,-0.57373455229129922,1.0618949483195195,1.1854715342938016,0.29705482433088531,0.056396313026446626,0.16330515197927445,-0.64814411671844951,-0.60726590354224497,0.37657356459642333,0.31808448921352828,1.1464312288020655,0.63297734989861543,-0.84804186805266357,1.0058674439493438,-0.10827207722295296,0.064701862565792606,0.83220182104326257,-0.46958720118085157,-0.10570945263574935,-0.051960441349587598,-0.53602996665527425,-0.78198075904370623,-1.0094884922668734,-0.62960784098264344,-0.15490373081513265,0.50946019932476927,-0.35377338909087247,1.1436290016068349,0.59095479791981831,-1.1940994730572558,1.2043807516245224,-0.10291588467616698,-0.012248645807421299,0.22307954345425104,0.17140639730668153,0.75672648208217552,-0.12698740287568488,0.92974449472040532,-0.76396898092195054,0.22945484491466328,0.77375628044329836,-0.12506719625040902,1.0771599045927238,-0.098112548287337967,1.1340602133101085,0.203100511645882,0.45870929713934194,-0.25600535866371121,-0.81796751171560544,-0.76939670155930839,0.55244879324911178,-0.59002799402108663,0.48337758837482309,-0.26054222320828513,-0.67751467708736268,-1.0202641259825012,0.93226922866260808,-0.025332740962596478,-0.34664092919086598,-0.12698740287568488,0.34961742064602397,-0.67717907155990242,1.0843739890273569,0.71424890616081138,0.65998734638749357,-0.71347580840639013,0.69906909688885299,0.88954867602600862,-0.16502796517693855,0.44721896586636584,0.84302313790015326,1.1256847711656877,-0.78198075904370623,0.66217298567241245,0.73392658273096212,0.81394113402655488,0.29213308415308387,-0.43073451319636435,0.33382069349800331,-0.46926057366362833,-0.11002248180593036,1.2048144367752824,-0.53777478175568971,0.60309241516584411,-0.13380015577621776,1.2311488621756246,-0.34695830974469305,-1.1435486333131337,0.15429828388388783,1.0798049758645702,-0.84958050817770125,0.82622507799536726,0.46078568464910186,-0.28728737249207453,1.0374814938216961,0.077666349327601067,1.1085869333995311,0.26584385131066524,1.0638896097061801,0.27624250336590739,0.7672818326950438,0.81140349130284628,-0.13284401438846716,0.40937229628305066,-0.18172925124031405,0.25995195992118114,-0.66065940930608602,0.29812210522019883,-0.70755728903505144,-0.050619176062309514,1.0507016163659575,-1.164674861748672,0.39018422773563577,0.80792535778244956,1.1004954310509267,-0.20210068998932462,0.19232521745212086,0.94854560318980641,-0.81195092277799019,-0.66131612947146146,0.12307584404505628,-0.47105713216940959,0.32125820175319031,0.019829031400259864,0.15488525646303528,0.25496407313502567,0.41428881737348139,0.55153399993852892,-0.38111375296599087,-1.3907645486432771,-0.21663654527427195,-0.38807997824824481,-0.70173828502957847,-0.21868160672877818,0.19078605704182031,0.17203751214855501,0.40049113305863177,-0.44846820649883873,-1.0372073698094659,0.75265741776265993,0.91177219348635696,0.4542955844071242,0.43640441454041939,-0.28761695728630998,-0.060587493840187086,0.08311640518062556,0.87817820100235622,-0.48312165651881134,1.1855908633064822,-0.0061464211039206238,-0.3812078849445506,0.12150702620115325,0.96279170386128066,-0.78198075904370623,-0.093930001858909151,0.025825678660492676,-0.67717907155990242,-0.066690571683374847,0.5911276998642403,-0.88569982554290827,-0.2591890149626539,0.83125417241695199,0.30408111079460259,0.22423392277554038,0.55454477535443203,0.58108082688391138,-0.25720675737774901,-0.61334585781259976,0.34159501823640337,0.44159406377988786,-0.21888356083184096,1.5853380054027941,-0.0770409166032794,-1.4881883354234491,-0.27992488320207393,0.47552244441768809,0.55147981988353578,-0.38514236688824233,0.40712506944443949,-0.62960784098264344,1.0902165659353094,0.55033251307732278,1.2245078189323555,-0.58731799609423474],\"y\":[-1.1319744147023938,-1.3109110534230519,-0.76002338283341309,-0.22625537062674117,-0.76622394218229939,-0.64507905466793725,0.35774820729238177,1.0064882860213251,-0.19577992800507413,-0.94316132811878184,-0.10073147751462599,0.092620570958453038,0.35581877133164819,-1.4542730886715964,-1.1616121897207801,0.16470962667013225,-0.23256407590032785,-1.152503693728538,0.31970316642314928,0.67772304351278267,-0.37501520030606372,-0.97905017986634058,-1.4178440211555505,-0.13530897126709629,0.18801125333118496,-0.57811674080936259,-0.2612218513386112,0.53161728031556243,-0.19587562508460898,-0.76240595117486321,-0.57049088039116613,-0.67353498060200878,-0.94734454684803271,0.17391207197654424,0.29793499959349456,-0.50144770426159901,0.75380518560277299,-0.82749276969159524,-0.65422083348998261,-0.42019602628414016,-0.50814152313387673,2.0871054527105217,-0.42784830244357974,-0.2847243710704187,-0.28292513039063827,-0.298459572860166,-0.92173121295540827,-0.58245930002390645,-0.27472436870200928,0.047259519356280068,-0.986860956878722,0.48536189213493813,-0.79199320107538518,-0.93358010275678738,-1.0371908326617993,-0.61728153282932696,-0.60512429216008534,0.25736729147114518,-0.59697499865207204,-0.30052908657924443,-0.77601470367241987,-0.086349921306400013,-0.77537871613329057,0.4951106517606304,-0.18844800616178459,-1.0350051222225687,-1.103794035180973,-0.15623557388305617,-0.8058268324271195,-0.30203729178269184,-0.44641452849110258,-0.54198346696436661,0.11550132550943622,-1.5406324356581893,-1.098605169717862,-1.3882583846075074,-0.86045142189539092,-1.0517891751866382,-0.8555507019111831,0.80493454969958333,-0.52203499989875113,-0.62479104871836721,-1.5144396336173727,-1.5812695360178175,-0.15673682208327794,-0.97708544771128492,-0.061585210591009854,0.66357956774303517,-1.1913995290517085,-1.401676004411037,-0.81934488024916197,0.80126933959947011,-0.66413387366357091,0.3590529180067541,-1.4771655627473819,-0.006164701035667873,-1.1182513004637471,-1.6144262751566349,0.32191440699260426,-0.52836126387207016,-0.66654900022454533,-1.5622970943723737,0.00029120729177282479,-0.25496244821647862,-0.99543448543502611,0.55971659910693072,-1.3422226012887417,-0.47518007031939929,-1.4871403686323352,-1.1950067960210777,0.14202307182971402,-1.1913995290517085,0.41669805384128406,-1.4257714343827999,-0.26854263116389693,-0.91950017639003778,0.74823066843633323,-0.42203709415147828,-0.13361544660168947,-0.68260940137130066,-1.3239578563309613,-1.5143325094703806,-0.16889507220461417,0.49910197603003031,-1.5406324356581893,-1.2936284169706671,-0.60866248163677728,-0.46446468371908761,0.11376595531383139,-0.01162028675300235,-0.83385467203254571,-0.8635703367377392,-0.33099203282981593,-0.26883285228234344,-0.7081258398119743,-1.4670732254354881,0.27263080661846628,-0.39461097703301662,-0.56342806608751206,-0.67037987242252173,-1.4050021423266379,-1.1292816182514569,-0.32448766355665426,0.051479403431724517,-0.44284459834172429,-0.79598931967353792,-0.51170426292482996,-0.028867835353462403,0.22403508486207813,-0.15171141289004228,-0.76842771170638169,-1.1429646540106728,-1.3846846072208518,-0.12736197165894506,0.98792925411018973,-1.3849989885198168,-0.75362283771670213,-0.95474226909858029,-0.67983873303502906,-0.53634334769281411,-0.59744210327180136,-0.43788446387842206,-0.98083091432643321,-1.0740080630369819,-0.62820472462590315,-1.1371166465963849,-1.1552017791480096,-0.98785876633308944,-1.1760019273485063,0.2756458437055464,0.027195678713159484,-0.93728516050741184,-0.59172966220968926,-0.45541184271494295,-0.53280266204351923,-0.36117146119217053,0.20266772981800146,0.14642419458589062,0.04046641528640707,-1.2529135873539305,-0.59008766938948898,-0.89445569467453934,-0.068894756389590653,0.056830492208715673,-0.60328073121485126,0.23828115022901994,-0.30236373609914191,0.38731042436288843,-1.0616460168603923,-0.24008013658590616,-1.0826209301552967,-1.527459569361046,-0.073906763801477426,-0.94501775856926074,-0.20399746782456724,-1.0941605900895539,-0.21953228353004239,-0.43183607384454259,-0.28295511708122462,0.065239712953492915,-0.34339200571410866,-0.12692103325173765,-0.093679101650702271,-0.21426934630902145,-0.35042535393534874,-1.5406324356581893,-0.043246242926851121,0.58915253813120316,-1.4257714343827999,-0.69255962303452756,0.41027034183362288,-0.58248522996186192,-0.57317505051379081,-0.12939056446663552,-0.57117959089930148,-0.597574165040205,-0.67398993467854384,-1.3746162014940908,-0.20585720141380318,-1.0344518614460831,-1.1561301973344311,-0.011286888532857087,-0.91170192309190756,-0.40910912928700605,0.15012285166473788,-0.87018381648698517,-0.95563284012951422,-0.18004160787560017,-0.33099214581970809,-0.39725779038188563,-0.74458432253486451,-1.3882583846075074,-0.81463833851693734,-1.2419963400919922,-0.9018637514645923,-0.00058927025601868024],\"z\":[0.43164061930504172,-0.00026680415745709515,0.16444390166848183,-0.94377576966988441,-0.63671018641088706,-0.75165780996879528,0.66549619409053495,-0.033891515424326675,-0.81576448833545112,-0.3257744868099588,0.63253069341878465,-0.55782471161665503,-0.2466321101003727,-0.71193567086320197,-0.14805514415097673,-0.34418964978087735,-0.36412082311086547,0.53800171687192488,0.045648173157060698,0.52521162828085322,-0.38960124216757724,-0.15871962567731204,0.28315274060014567,-0.45460423278114931,-0.11867091433593313,-0.99096287067887079,-0.19986682664927416,-1.229694803726181,-0.50309054341341297,-0.5335038301859818,0.30435562198708094,-0.38127892970859073,-0.65143089317471381,-0.38891441325549703,-1.015488161986084,0.49467444018875739,-1.0474782582407385,0.11327654050459211,-0.11549063407565571,-0.21324605642436673,0.2414186677669618,-2.3779717851444864,-0.65901128334346526,-0.39891137591215675,-0.71487015880130489,-0.20616360702113823,-0.70500915881806037,-0.12709269957097272,0.60927464134217868,-0.61810249609811796,-0.076108064431155767,1.1974828087248774,0.61566949571789586,-0.24422718550760761,-0.14397541292343846,0.12513457433496103,-0.42360273291071032,0.27476653029321829,-0.24651675833706846,0.10130724798965295,-1.0583089556133378,-0.14059486932237114,-0.55157133480877363,0.7353729756143681,-0.60616146511495328,-0.29668513918293404,-0.59752555593934853,-0.61897283237656053,-0.58223265425236903,-0.40618336908598407,0.021955334626498364,0.198109971202545,0.17795007198433216,-0.68314059740449207,-0.94293306245347674,0.003455739409543683,-0.51121327889556956,-0.55946717804322454,-0.44416882634295368,-0.99284888564618201,0.34784066883419351,-0.64329891436815578,0.2505270489633693,-0.22585269670233463,-0.47305432134385322,-0.42776751780651179,-0.16155454152341497,-0.63382231141833301,0.60861063113209335,0.2535352602694031,0.42693111527508526,0.55654903482477214,-0.2920792289661483,-0.81987512242877225,0.2541134952362582,-0.067403020398827965,-0.035678065146617123,-0.20193842594572198,-0.093757273551929518,0.11120390518199523,-0.32893316417005591,-0.69190846188566602,-0.2461838066496706,-1.7415624720124478,-0.67619805350660744,-0.30863256772643893,-0.66405765962757146,-0.78999416972234693,0.16018616683951128,0.57567238688769695,0.34628855531748159,0.60861063113209335,-0.14616561791049418,-0.16423039858625299,0.67448301952709178,-0.32082214455396763,0.35001768877675477,0.049905835248725459,-0.17807949122857239,0.54697762618480783,0.22524414730033449,0.037769314096963949,-0.042969087595982149,-1.0035081623243689,-0.68314059740449207,-0.35636081449172541,0.29332258936093086,0.44601685857897561,0.12243441490835254,-0.27590200156975897,-0.28753506582626759,-0.26180587191974392,-0.029340005504249585,-0.85333807080395196,-0.4427028756630122,-0.050386853302517458,0.5456805187840591,0.059004929855064801,0.088183103501271939,-0.78627552696850411,0.10005870725778333,-0.28244275074668596,-0.70839972642111437,0.5699314157328651,-0.053356928330692069,-0.18952446545046026,-0.59663951680887573,-0.32174483698765194,0.18580493162943132,-0.081082526268982616,-0.31156564934707331,-0.74394409679056972,0.0040569045938281473,0.043268462072767001,-1.419427888131058,0.21960233574003379,-0.047066116561188164,-0.26704867666197241,-0.46745773976733296,0.23775542275106615,0.014382666364963182,-0.22349761027689752,-0.42044735961777491,-0.98989788724364758,0.38068680750400063,-0.20000094550441436,-0.016748655527737567,0.039837798185223865,-0.11362375056634756,-0.33282761146924561,-0.25290308789700972,-0.13971031638005926,0.15632911582449238,-1.0591464068975056,0.015198236046003469,-1.2705308592838624,-0.26119799561091867,-0.0039110447118060696,-0.27104691755876004,-0.3261178545514189,-0.54821694886972994,-0.80224139414160855,-0.38004481237444182,-0.42805620817034012,-0.38262459684129863,0.2269783361063416,-0.29874395939898668,0.79940959749253504,-0.82139895632001392,-0.72197285249948573,-0.36469609689087912,0.1138383583126478,-0.45566602653754024,-0.19301186632090661,0.59863677250622027,0.34861998757933299,-0.21637668392143861,-0.35285278993284813,0.035244519935377416,-0.39122134329232316,0.37614004043143218,0.087733495710782511,-0.087655488698840336,-0.24620339559243112,0.31202620236554957,-0.68314059740449207,-0.25169980099227879,-0.031821658690462287,-0.16423039858625299,-0.12590842365479787,0.6584895037709676,-0.67928866538503585,0.11721847876888977,0.3334323277880834,0.170653934249654,0.068695347357284942,0.34446127322696252,-0.37238742593993562,-1.4711576492252021,0.23950383636768846,0.63975168596091025,0.13232376024097034,-0.69130510850932847,-1.012662323824709,-0.19560623942036817,-0.93227303965991404,-0.026973903202521302,0.084299336697289576,0.59317010171661833,-0.3658303877597871,-0.47921909301108134,0.003455739409543683,-0.24947299367766218,-0.32670870018129683,-0.26886497855034525,-0.55522183282379378],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"size\":5,\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"type\":\"scatter3d\",\"name\":\"3\",\"textfont\":{\"color\":\"rgba(141,160,203,1)\"},\"error_y\":{\"color\":\"rgba(141,160,203,1)\"},\"error_x\":{\"color\":\"rgba(141,160,203,1)\"},\"line\":{\"color\":\"rgba(141,160,203,1)\"},\"frame\":null},{\"x\":[1.7213800791671123,1.9074762839450166,2.2780370017170957,2.1531052305756684,2.1421899893689758,2.3664618127116608,2.2827346093228589,2.4214566807365823,1.7690750074361994,1.8515929832185374,2.9012234616266914,1.2226453070591021,0.84757998310393601,4.2140931451874781,2.0431447839910217,1.1423529588032668,1.2302568982615141,2.6439268526163375,2.3318294525732695,1.4721738965743085,3.3020257134322404,1.6426223693402133,1.9106180665218806,2.4605403934296874,2.4031327042372439,1.8639915641721345,1.9898847569410725,1.7034839959371579,0.59594546437181994,3.1001882379303001,1.9085003157951437,3.3043650099097031,1.9519559976224423,2.8669553978166782,2.5775714673956793,1.0181701548976423,1.4590647680887252,3.516656019009317,3.5413278820382095,0.9030656115388016,3.0876737451894916,2.4549011638414817,1.2953415387846401,2.1216088411065885,3.6953440437145475,1.7333069870398532,1.7477079635172941,3.488627413619152,2.0914389417800847,2.0219602639149046,1.8543726880030178,4.3645510801994298,2.1905602767957477,1.757602904453095,1.7353662974405029,2.3629105314428602,2.7534023085492989,1.3005578007215377,2.1731269691559487,1.8588732271960751,3.99622719033355,2.48593916399374,2.3956916312258456,1.4009077717513672,2.4875473282150082,1.6948725103754045,2.1436483289878541,4.3449862863377344,1.6130809420347285,2.4212930847941623,1.8966097993061377,1.9885387728959016,1.7173573430357805,3.9928029717885205,4.0933564522102328,1.9047506276768666,1.590307107357156,1.241943409579483,3.3106305957102391,2.8393506237742727,2.0273224075763085],\"y\":[-0.97315355955280702,-0.057393385860076924,-0.64835780819937117,-0.87355573681710064,0.070681825954232225,-0.57688694112007644,0.22536393575811967,1.5198993128507297,-0.24990211635182286,-0.57043376855412176,1.9035475436251521,0.22704518188532674,0.95586120867703017,-0.072289029523703377,-0.90364158426456476,-0.17670027414299941,-0.13166947245298125,-1.2317804551980729,0.90376217084142529,0.25357278420528206,-0.17136877347270166,-0.92012230711543186,-0.92105039057238824,0.67528337712784003,3.938641191784447,-0.57857921907869747,0.92916897498082962,-1.0915994457529343,1.4578064826197139,-0.33091839388099931,-0.938104080077377,1.7740883912242142,-0.80460846252136431,0.067367896257086946,-0.36188028959175006,-0.12886705018677141,-0.057231271849447131,-0.88944321079771516,-0.60620419726154062,0.27484591619566262,-0.60986230479677328,-0.65083721934569339,-0.44440015504856939,-1.1553883719174785,0.055614155572556931,0.74556751923319786,0.16136255273963945,-0.44808003173944744,0.74690608267401237,-0.84463749546810496,-0.37563292750253674,0.97810190443309153,-0.31798167100956237,-0.52656590298772021,-0.62875513497591895,0.038966324532522377,0.39835118241087014,-0.38772131515613606,0.39992989204289386,-0.8715320048685401,-0.17519417028718182,-0.54108675113299132,-0.17117273452374066,-0.08184376656982803,0.60737347072659964,-0.18829498382270915,1.1560201004730062,-0.6257953314972563,-1.1146113342841084,-0.17528480287561735,-0.89785067489272308,-1.0702764552751933,0.39836298723880442,-1.5643174589962501,-0.54056599885876344,0.02634176546198206,-0.18257295804887574,0.38513453664154418,0.009680900399763933,0.064256256296860964,0.037740734728716814],\"z\":[-0.35031919961711283,-0.69250580993559441,0.66160767253587494,0.59303566370888539,0.8916385781548537,-0.3945224865189722,0.35356031403779403,-0.016039615839313282,1.2983541218163352,-0.20989963282599158,1.0432108409505492,-0.57010752046987845,1.157028512280909,-0.24355713027480527,-0.28890749608410382,-0.059229659863756008,0.57190617886903894,0.325859662432256,-0.021333538985585262,0.71015000291343877,1.1183912284422366,-0.0035411584664764113,0.43330560559474779,1.1066088504856204,2.8398732857551576,-0.34370873145797487,0.44919134556403745,0.068705661941314819,1.6080435505345818,0.028853025106645711,-0.31967305434620608,-1.0033051834015581,-0.19926711830884639,0.14207832910207041,0.80792239784877762,0.18750644460133833,1.4054159625099092,0.26934313881588517,0.16396772507249971,1.5208604455609156,0.0042972626541339523,0.59256249108027503,0.078659979582354794,-0.01409257894875862,1.5515942299497778,-0.12950132790173235,0.5241275573574945,0.38642783149627918,1.6785058137736455,0.36443343248932275,0.96349343654159592,2.0800522307258946,-0.58511288534075878,0.53367729180142875,0.45387365826858639,1.5574969806101129,1.0135902535573784,0.30482341969944859,1.7395780158551073,-0.27888927453018375,1.5470932176581873,-0.19701778902008232,0.59876520457146654,-0.070606591316219297,1.7433413993973914,0.97736944383951585,0.76505811204799279,-0.052424894302661659,0.088123275032226792,1.8851282180563544,-0.31106430610185759,-0.11334687015182464,0.72304354293988193,-0.56469520895905223,0.57138077784356756,0.93443276653721996,0.84243294376409306,-0.29193011648055156,1.0398858964571975,1.02844391888425,0.85680238832097411],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(231,138,195,1)\",\"size\":5,\"line\":{\"color\":\"rgba(231,138,195,1)\"}},\"type\":\"scatter3d\",\"name\":\"4\",\"textfont\":{\"color\":\"rgba(231,138,195,1)\"},\"error_y\":{\"color\":\"rgba(231,138,195,1)\"},\"error_x\":{\"color\":\"rgba(231,138,195,1)\"},\"line\":{\"color\":\"rgba(231,138,195,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nThe mathematics of PCA:\n- **Objective**: Find orthogonal axes maximizing variance\n- **Method**: Eigendecomposition of covariance matrix\n- **Result**: Linear combinations of original variables\n- **Key insight**: Most variance often captured in few components\n\n### t-SNE and UMAP: Non-linear Dimensionality Reduction\n\nFor complex, non-linear structures:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# t-SNE (computationally intensive, using sample)\nlibrary(Rtsne)\n\nset.seed(123)\ntsne_result <- Rtsne(scaled_data[1:200, ], dims = 2, perplexity = 30, \n                     verbose = FALSE, max_iter = 500)\n\ntsne_data <- as.data.frame(tsne_result$Y) %>%\n  set_names(c(\"tSNE1\", \"tSNE2\")) %>%\n  mutate(cluster = clustered_data$cluster[1:200])\n\nggplot(tsne_data, aes(x = tSNE1, y = tSNE2, color = cluster)) +\n  geom_point(size = 2, alpha = 0.7) +\n  labs(\n    title = \"t-SNE Visualization\",\n    subtitle = \"Non-linear dimensionality reduction preserves local structure\"\n  )\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Compare PCA vs t-SNE\ncomparison <- bind_rows(\n  pca_data[1:200, c(\"PC1\", \"PC2\", \"cluster\")] %>%\n    mutate(method = \"PCA\") %>%\n    rename(Dim1 = PC1, Dim2 = PC2),\n  tsne_data %>%\n    mutate(method = \"t-SNE\") %>%\n    rename(Dim1 = tSNE1, Dim2 = tSNE2)\n)\n\nggplot(comparison, aes(x = Dim1, y = Dim2, color = cluster)) +\n  geom_point(size = 2, alpha = 0.7) +\n  facet_wrap(~method, scales = \"free\") +\n  labs(\n    title = \"PCA vs t-SNE\",\n    subtitle = \"t-SNE often reveals clearer cluster separation\"\n  )\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n## Anomaly Detection\n\nIdentifying outliers and anomalies is crucial for many applications:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1: Statistical approach (Z-score)\nz_scores <- abs(scale(scaled_data))\nthreshold <- 3\noutliers_zscore <- which(rowSums(z_scores > threshold) > 0)\n\n# Method 2: Isolation Forest\nlibrary(isotree)\n\niso_forest <- isolation.forest(scaled_data, ntrees = 100, sample_size = 256)\noutlier_scores <- predict(iso_forest, scaled_data)\n\n# Identify outliers (top 5% highest scores)\noutlier_threshold <- quantile(outlier_scores, 0.95)\noutliers_iforest <- which(outlier_scores > outlier_threshold)\n\n# Method 3: Local Outlier Factor (LOF)\nlibrary(dbscan)\nlof_scores <- lof(scaled_data, minPts = 10)\noutliers_lof <- which(lof_scores > 1.5)\n\n# Compare methods\noutlier_comparison <- tibble(\n  index = 1:nrow(scaled_data),\n  z_score = index %in% outliers_zscore,\n  isolation_forest = index %in% outliers_iforest,\n  lof = index %in% outliers_lof\n) %>%\n  mutate(\n    n_methods = z_score + isolation_forest + lof,\n    consensus_outlier = n_methods >= 2\n  )\n\n# Visualize outliers in PCA space\noutlier_pca <- bind_cols(\n  as.data.frame(pca_result$x[, 1:2]),\n  outlier_comparison\n)\n\nggplot(outlier_pca, aes(x = PC1, y = PC2)) +\n  geom_point(aes(color = consensus_outlier), size = 2, alpha = 0.7) +\n  scale_color_manual(values = c(\"FALSE\" = \"gray\", \"TRUE\" = \"red\"),\n                     labels = c(\"Normal\", \"Outlier\")) +\n  labs(\n    title = \"Anomaly Detection Results\",\n    subtitle = \"Points identified as outliers by at least 2 methods\",\n    color = \"Status\"\n  )\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Examine outlier characteristics\noutlier_indices <- which(outlier_comparison$consensus_outlier)\noutlier_analysis <- clustering_data[outlier_indices, ] %>%\n  summarise(across(everything(), list(mean = mean, median = median)))\n\nnormal_analysis <- clustering_data[-outlier_indices, ] %>%\n  summarise(across(everything(), list(mean = mean, median = median)))\n\ncat(\"Outlier characteristics vs normal points:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOutlier characteristics vs normal points:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(outlier_analysis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 10\n  Gr_Liv_Area_mean Gr_Liv_Area_median Lot_Area_mean Lot_Area_median\n             <dbl>              <int>         <dbl>           <int>\n1            2403.               2338        33529.           26400\n# i 6 more variables: Year_Built_mean <dbl>, Year_Built_median <int>,\n#   Total_Bsmt_SF_mean <dbl>, Total_Bsmt_SF_median <dbl>,\n#   Garage_Area_mean <dbl>, Garage_Area_median <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(normal_analysis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 10\n  Gr_Liv_Area_mean Gr_Liv_Area_median Lot_Area_mean Lot_Area_median\n             <dbl>              <int>         <dbl>           <int>\n1            1462.               1414         9413.            9260\n# i 6 more variables: Year_Built_mean <dbl>, Year_Built_median <int>,\n#   Total_Bsmt_SF_mean <dbl>, Total_Bsmt_SF_median <dbl>,\n#   Garage_Area_mean <dbl>, Garage_Area_median <dbl>\n```\n\n\n:::\n:::\n\n\n## Market Basket Analysis\n\nDiscover associations in transactional data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create synthetic transaction data\nset.seed(789)\nn_transactions <- 1000\n\n# Housing features that might be purchased together\nfeatures <- c(\"Granite_Counters\", \"Hardwood_Floors\", \"Central_AC\", \n             \"Updated_Kitchen\", \"Finished_Basement\", \"Deck\", \n             \"Pool\", \"Security_System\", \"Smart_Home\", \"Solar_Panels\")\n\n# Generate transactions with realistic patterns\ntransactions <- map(1:n_transactions, function(i) {\n  # Base probability for each item\n  probs <- c(0.3, 0.4, 0.6, 0.35, 0.25, 0.3, 0.1, 0.2, 0.15, 0.05)\n  \n  # Adjust probabilities based on correlations\n  selected <- c()\n  \n  for (j in 1:length(features)) {\n    # Increase probability if related items selected\n    adj_prob <- probs[j]\n    \n    if (\"Granite_Counters\" %in% selected && features[j] == \"Updated_Kitchen\") {\n      adj_prob <- min(1, adj_prob * 3)\n    }\n    if (\"Smart_Home\" %in% selected && features[j] == \"Security_System\") {\n      adj_prob <- min(1, adj_prob * 2.5)\n    }\n    if (\"Pool\" %in% selected && features[j] == \"Deck\") {\n      adj_prob <- min(1, adj_prob * 2)\n    }\n    \n    if (runif(1) < adj_prob) {\n      selected <- c(selected, features[j])\n    }\n  }\n  \n  selected\n})\n\n# Convert to transaction matrix\nlibrary(arules)\n\ntrans_matrix <- as(transactions, \"transactions\")\n\n# Find association rules\nrules <- apriori(trans_matrix, \n                parameter = list(supp = 0.05, conf = 0.5, target = \"rules\"))\n\n# Inspect top rules\ntop_rules <- head(sort(rules, by = \"lift\"), 10)\ninspect(top_rules)\n\n# Visualize rules\nlibrary(arulesViz)\n\nplot(rules, method = \"graph\", \n     control = list(type = \"items\", alpha = 0.7),\n     main = \"Association Rules Network\")\n\n# Create rule quality metrics\nrule_metrics <- as(rules, \"data.frame\") %>%\n  as_tibble() %>%\n  separate(rules, into = c(\"lhs\", \"rhs\"), sep = \" => \") %>%\n  arrange(desc(lift))\n\nggplot(rule_metrics %>% head(20), \n       aes(x = support, y = confidence, size = lift, color = lift)) +\n  geom_point(alpha = 0.7) +\n  scale_size_continuous(range = c(2, 10)) +\n  scale_color_viridis_c() +\n  labs(\n    title = \"Association Rules Quality\",\n    subtitle = \"Size and color represent lift\",\n    x = \"Support\",\n    y = \"Confidence\"\n  )\n```\n:::\n\n\n## Evaluating Unsupervised Models\n\nWithout labels, evaluation is challenging but crucial:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Internal validation metrics for clustering\nevaluate_clustering <- function(data, clusters) {\n  # Silhouette coefficient\n  sil <- silhouette(clusters, dist(data))\n  avg_silhouette <- mean(sil[, 3])\n  \n  # Calinski-Harabasz Index\n  ch_index <- cluster.stats(dist(data), clusters)$ch\n  \n  # Davies-Bouldin Index (lower is better)\n  db_index <- cluster.stats(dist(data), clusters)$dunn\n  \n  # Within-cluster sum of squares\n  wcss <- sum(cluster.stats(dist(data), clusters)$within.cluster.ss)\n  \n  tibble(\n    avg_silhouette = avg_silhouette,\n    calinski_harabasz = ch_index,\n    davies_bouldin = db_index,\n    wcss = wcss\n  )\n}\n\n# Compare different clustering solutions\nclustering_methods <- list(\n  kmeans_3 = kmeans(scaled_data, 3, nstart = 25)$cluster,\n  kmeans_4 = kmeans(scaled_data, 4, nstart = 25)$cluster,\n  kmeans_5 = kmeans(scaled_data, 5, nstart = 25)$cluster,\n  hierarchical = cutree(hc_ward, k = 4)\n)\n\nevaluation_results <- map_df(clustering_methods, \n                            ~ evaluate_clustering(scaled_data, .),\n                            .id = \"method\")\n\nknitr::kable(evaluation_results, digits = 3)\n\n# Stability analysis: How consistent are clusters?\nstability_analysis <- function(data, k, n_bootstrap = 10) {\n  bootstrap_results <- map(1:n_bootstrap, function(i) {\n    # Bootstrap sample\n    sample_idx <- sample(1:nrow(data), replace = TRUE)\n    boot_data <- data[sample_idx, ]\n    \n    # Cluster\n    kmeans(boot_data, centers = k, nstart = 10)$cluster\n  })\n  \n  # Calculate pairwise agreement\n  agreements <- combn(n_bootstrap, 2, function(pair) {\n    cl1 <- bootstrap_results[[pair[1]]]\n    cl2 <- bootstrap_results[[pair[2]]]\n    \n    # Adjusted Rand Index\n    mclust::adjustedRandIndex(cl1, cl2)\n  })\n  \n  mean(agreements)\n}\n\nstability_scores <- tibble(\n  k = 2:6,\n  stability = map_dbl(2:6, ~ stability_analysis(scaled_data, ., n_bootstrap = 5))\n)\n\nggplot(stability_scores, aes(x = k, y = stability)) +\n  geom_line(linewidth = 1) +\n  geom_point(size = 3) +\n  labs(\n    title = \"Clustering Stability Analysis\",\n    subtitle = \"Higher scores indicate more stable clusters\",\n    x = \"Number of Clusters\",\n    y = \"Average Adjusted Rand Index\"\n  )\n```\n:::\n\n\n## Real-World Applications\n\n### Customer Segmentation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate customer data\nset.seed(123)\nn_customers <- 1000\n\ncustomer_data <- tibble(\n  customer_id = 1:n_customers,\n  age = round(rnorm(n_customers, 45, 15)),\n  income = round(rlnorm(n_customers, 11, 0.5)),\n  spending_score = round(runif(n_customers, 1, 100)),\n  purchase_frequency = rpois(n_customers, lambda = 5),\n  avg_transaction = round(rlnorm(n_customers, 4, 0.5)),\n  online_engagement = round(runif(n_customers, 0, 100))\n) %>%\n  mutate(\n    age = pmax(18, pmin(80, age)),\n    income = pmax(20000, pmin(200000, income))\n  )\n\n# Preprocessing\ncustomer_scaled <- customer_data %>%\n  select(-customer_id) %>%\n  scale()\n\n# Segment customers\ncustomer_segments <- kmeans(customer_scaled, centers = 4, nstart = 25)\n\n# Profile segments\ncustomer_profiles <- customer_data %>%\n  mutate(segment = factor(customer_segments$cluster)) %>%\n  group_by(segment) %>%\n  summarise(\n    count = n(),\n    avg_age = mean(age),\n    avg_income = mean(income),\n    avg_spending = mean(spending_score),\n    avg_frequency = mean(purchase_frequency),\n    avg_transaction_value = mean(avg_transaction),\n    avg_engagement = mean(online_engagement)\n  )\n\nknitr::kable(customer_profiles, digits = 0)\n```\n\n::: {.cell-output-display}\n\n\n|segment | count| avg_age| avg_income| avg_spending| avg_frequency| avg_transaction_value| avg_engagement|\n|:-------|-----:|-------:|----------:|------------:|-------------:|---------------------:|--------------:|\n|1       |   170|      51|     123792|           52|             5|                    55|             42|\n|2       |   349|      47|      57856|           24|             5|                    51|             51|\n|3       |   131|      45|      63800|           50|             5|                   122|             51|\n|4       |   350|      41|      55388|           74|             5|                    52|             50|\n\n\n:::\n\n```{.r .cell-code}\n# Visualize segments\ncustomer_pca <- prcomp(customer_scaled)\n\ncustomer_viz <- as.data.frame(customer_pca$x[, 1:2]) %>%\n  mutate(segment = factor(customer_segments$cluster))\n\nggplot(customer_viz, aes(x = PC1, y = PC2, color = segment)) +\n  geom_point(alpha = 0.5) +\n  stat_ellipse(level = 0.95) +\n  labs(\n    title = \"Customer Segments\",\n    subtitle = \"Four distinct customer groups identified\"\n  )\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Segment characteristics\nsegment_names <- c(\n  \"1\" = \"High-Value Engaged\",\n  \"2\" = \"Young Browsers\",\n  \"3\" = \"Loyal Regulars\",\n  \"4\" = \"Occasional Shoppers\"\n)\n\ncustomer_profiles %>%\n  mutate(segment_name = segment_names[as.character(segment)]) %>%\n  select(segment_name, everything(), -segment) %>%\n  knitr::kable(digits = 0)\n```\n\n::: {.cell-output-display}\n\n\n|segment_name        | count| avg_age| avg_income| avg_spending| avg_frequency| avg_transaction_value| avg_engagement|\n|:-------------------|-----:|-------:|----------:|------------:|-------------:|---------------------:|--------------:|\n|High-Value Engaged  |   170|      51|     123792|           52|             5|                    55|             42|\n|Young Browsers      |   349|      47|      57856|           24|             5|                    51|             51|\n|Loyal Regulars      |   131|      45|      63800|           50|             5|                   122|             51|\n|Occasional Shoppers |   350|      41|      55388|           74|             5|                    52|             50|\n\n\n:::\n:::\n\n\n## Best Practices\n\n### 1. Data Preprocessing is Critical\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Demonstrate importance of scaling\nunscaled_clusters <- kmeans(clustering_data, centers = 3, nstart = 25)\nscaled_clusters <- kmeans(scaled_data, centers = 3, nstart = 25)\n\n# Compare results\ncomparison_data <- clustering_data %>%\n  mutate(\n    unscaled = factor(unscaled_clusters$cluster),\n    scaled = factor(scaled_clusters$cluster)\n  )\n\np1 <- ggplot(comparison_data, aes(x = Gr_Liv_Area, y = Year_Built, \n                                   color = unscaled)) +\n  geom_point() +\n  labs(title = \"Unscaled Data Clustering\")\n\np2 <- ggplot(comparison_data, aes(x = Gr_Liv_Area, y = Year_Built, \n                                   color = scaled)) +\n  geom_point() +\n  labs(title = \"Scaled Data Clustering\")\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### 2. Choose the Right Algorithm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgorithm_guide <- tibble(\n  Scenario = c(\n    \"Spherical, similar-sized clusters\",\n    \"Unknown number of clusters\",\n    \"Non-spherical clusters\",\n    \"Outliers present\",\n    \"Hierarchical structure\",\n    \"Large datasets\",\n    \"Mixed data types\"\n  ),\n  `Recommended Algorithm` = c(\n    \"K-means\",\n    \"Hierarchical or DBSCAN\",\n    \"DBSCAN or Spectral\",\n    \"DBSCAN or Robust K-means\",\n    \"Hierarchical clustering\",\n    \"Mini-batch K-means\",\n    \"K-prototypes or Gower distance\"\n  )\n)\n\nknitr::kable(algorithm_guide)\n```\n\n::: {.cell-output-display}\n\n\n|Scenario                          |Recommended Algorithm          |\n|:---------------------------------|:------------------------------|\n|Spherical, similar-sized clusters |K-means                        |\n|Unknown number of clusters        |Hierarchical or DBSCAN         |\n|Non-spherical clusters            |DBSCAN or Spectral             |\n|Outliers present                  |DBSCAN or Robust K-means       |\n|Hierarchical structure            |Hierarchical clustering        |\n|Large datasets                    |Mini-batch K-means             |\n|Mixed data types                  |K-prototypes or Gower distance |\n\n\n:::\n:::\n\n\n## Exercises\n\n### Exercise 1: Implement Custom Distance Metric\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your solution\n# Custom distance for mixed data types\ngower_distance <- function(data) {\n  # Gower distance handles mixed types\n  library(cluster)\n  \n  # Create mixed type data\n  mixed_data <- ames %>%\n    select(Gr_Liv_Area, Lot_Area, Neighborhood, Central_Air) %>%\n    slice_sample(n = 100)\n  \n  # Calculate Gower distance\n  gower_dist <- daisy(mixed_data, metric = \"gower\")\n  \n  # Perform clustering\n  gower_clusters <- hclust(gower_dist, method = \"complete\")\n  \n  # Cut tree\n  clusters <- cutree(gower_clusters, k = 3)\n  \n  # Visualize\n  mixed_data %>%\n    mutate(cluster = factor(clusters)) %>%\n    ggplot(aes(x = Gr_Liv_Area, y = Lot_Area, color = cluster)) +\n    geom_point(size = 3) +\n    facet_wrap(~Neighborhood) +\n    labs(title = \"Clustering with Gower Distance\")\n}\n\ngower_distance()\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Exercise 2: Ensemble Clustering\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your solution\n# Combine multiple clustering results\nensemble_clustering <- function(data, k = 4) {\n  # Multiple clustering algorithms\n  km <- kmeans(data, centers = k, nstart = 25)$cluster\n  hc <- cutree(hclust(dist(data), method = \"ward.D2\"), k = k)\n  \n  # Create co-association matrix\n  n <- nrow(data)\n  co_assoc <- matrix(0, n, n)\n  \n  # K-means contribution\n  for (i in 1:n) {\n    for (j in 1:n) {\n      if (km[i] == km[j]) co_assoc[i, j] <- co_assoc[i, j] + 1\n    }\n  }\n  \n  # Hierarchical contribution\n  for (i in 1:n) {\n    for (j in 1:n) {\n      if (hc[i] == hc[j]) co_assoc[i, j] <- co_assoc[i, j] + 1\n    }\n  }\n  \n  # Average co-association\n  co_assoc <- co_assoc / 2\n  \n  # Final clustering on co-association matrix\n  final_dist <- as.dist(1 - co_assoc)\n  final_clusters <- cutree(hclust(final_dist, method = \"average\"), k = k)\n  \n  return(final_clusters)\n}\n\n# Apply ensemble clustering\nensemble_result <- ensemble_clustering(scaled_data[1:100, ])\n\n# Visualize\npca_subset <- as.data.frame(pca_result$x[1:100, 1:2]) %>%\n  mutate(ensemble = factor(ensemble_result))\n\nggplot(pca_subset, aes(x = PC1, y = PC2, color = ensemble)) +\n  geom_point(size = 3) +\n  labs(title = \"Ensemble Clustering Result\")\n```\n\n::: {.cell-output-display}\n![](17-unsupervised-learning_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Exercise 3: Clustering Interpretation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your solution\n# Automated cluster interpretation\ninterpret_clusters <- function(data, clusters) {\n  clustered <- data %>%\n    mutate(cluster = factor(clusters))\n  \n  # Statistical tests for each variable\n  interpretation <- map_df(names(data), function(var) {\n    # ANOVA for continuous variables\n    formula <- as.formula(paste(var, \"~ cluster\"))\n    aov_result <- aov(formula, data = clustered)\n    \n    tibble(\n      variable = var,\n      f_statistic = summary(aov_result)[[1]][[\"F value\"]][1],\n      p_value = summary(aov_result)[[1]][[\"Pr(>F)\"]][1],\n      importance = if_else(p_value < 0.001, \"High\",\n                          if_else(p_value < 0.05, \"Medium\", \"Low\"))\n    )\n  })\n  \n  # Characteristic values per cluster\n  characteristics <- clustered %>%\n    group_by(cluster) %>%\n    summarise(across(where(is.numeric), \n                    list(mean = ~mean(., na.rm = TRUE),\n                         sd = ~sd(., na.rm = TRUE))))\n  \n  list(\n    importance = interpretation %>% arrange(p_value),\n    characteristics = characteristics\n  )\n}\n\n# Apply to our clustering\ninterpretation <- interpret_clusters(clustering_data, km_result$cluster)\n\ncat(\"Variable Importance for Clustering:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nVariable Importance for Clustering:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(interpretation$importance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 4\n  variable      f_statistic   p_value importance\n  <chr>               <dbl>     <dbl> <chr>     \n1 Lot_Area             260. 2.25e-101 High      \n2 Year_Built           258. 8.56e-101 High      \n3 Garage_Area          184. 4.44e- 80 High      \n4 Gr_Liv_Area          115. 1.81e- 56 High      \n5 Total_Bsmt_SF        112. 3.43e- 55 High      \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\nCluster Characteristics:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCluster Characteristics:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(interpretation$characteristics)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 11\n  cluster Gr_Liv_Area_mean Gr_Liv_Area_sd Lot_Area_mean Lot_Area_sd\n  <fct>              <dbl>          <dbl>         <dbl>       <dbl>\n1 1                  2513.           925.        56046.      24670.\n2 2                  1296.           409.         8466.       3142.\n3 3                  1397.           307.         9414.       4132.\n4 4                  2147.           466.        13104.       4393.\n# i 6 more variables: Year_Built_mean <dbl>, Year_Built_sd <dbl>,\n#   Total_Bsmt_SF_mean <dbl>, Total_Bsmt_SF_sd <dbl>, Garage_Area_mean <dbl>,\n#   Garage_Area_sd <dbl>\n```\n\n\n:::\n:::\n\n\n## Summary\n\nIn this comprehensive chapter, you've mastered:\n\n✅ **Clustering algorithms**\n  - K-means for spherical clusters\n  - Hierarchical for nested structure\n  - DBSCAN for arbitrary shapes\n  - Evaluation metrics\n\n✅ **Dimensionality reduction**\n  - PCA for linear reduction\n  - t-SNE/UMAP for non-linear\n  - Interpretation of components\n  - Visualization techniques\n\n✅ **Anomaly detection**\n  - Statistical methods\n  - Isolation forests\n  - Local outlier factor\n  - Ensemble approaches\n\n✅ **Association analysis**\n  - Market basket analysis\n  - Rule mining\n  - Lift and confidence metrics\n\n✅ **Practical applications**\n  - Customer segmentation\n  - Data preprocessing importance\n  - Algorithm selection\n  - Evaluation strategies\n\nKey takeaways:\n- Unsupervised learning finds structure without labels\n- Preprocessing (especially scaling) is crucial\n- No single best algorithm - depends on data structure\n- Validation is challenging but essential\n- Combine multiple methods for robustness\n- Visualization aids interpretation\n\n## What's Next?\n\nIn [Chapter 18](18-model-deployment.Rmd), we'll learn how to deploy models to production.\n\n## Additional Resources\n\n- [Introduction to Statistical Learning - Chapter 12](https://www.statlearning.com/)\n- [Elements of Statistical Learning - Chapter 14](https://hastie.su.domains/ElemStatLearn/)\n- [Cluster Analysis Book](https://www.wiley.com/en-us/Cluster+Analysis%2C+5th+Edition-p-9780470749913)\n- [Survey of Clustering Algorithms](https://link.springer.com/article/10.1007/s40745-015-0040-1)\n",
    "supporting": [
      "17-unsupervised-learning_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}