{
  "hash": "58c644759ffc271da664a24983723539",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 1: Introduction to R and the Tidyverse Ecosystem\"\nauthor: \"David Sarrat GonzÃ¡lez, Juan R GonzÃ¡lez\"\ndate: today\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n---\n\n## Learning Objectives\n\nBy the end of this chapter, you will:\n\n- Understand the philosophy and principles of the tidyverse\n- Know the core tidyverse packages and their purposes\n- Be able to install and load tidyverse packages\n- Understand the pipe operator (`%>%` and `|>`)\n- Work with tibbles, the tidyverse's modern data frames\n- Understand tidy data principles\n\n::: {.callout-tip}\n## Download R Script\nYou can download the complete R code for this chapter:\n[ðŸ“¥ Download 01-introduction.R](R_scripts/01-introduction.R){.btn .btn-primary download=\"01-introduction.R\"}\n:::\n\n## What is the Tidyverse?\n\nThe tidyverse is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. The tidyverse makes data manipulation, exploration, and visualization faster and more intuitive.\n\n### Core Tidyverse Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install tidyverse if you haven't already\n# install.packages(\"tidyverse\")\n\n# Load the tidyverse\nlibrary(tidyverse)\n```\n:::\n\n\nThe tidyverse includes these core packages:\n\n1. **ggplot2**: Data visualization\n2. **dplyr**: Data manipulation\n3. **tidyr**: Data tidying\n4. **readr**: Data import\n5. **purrr**: Functional programming\n6. **tibble**: Modern data frames\n7. **stringr**: String manipulation\n8. **forcats**: Factor handling\n\n## The Pipe Operator\n\nThe pipe operator is fundamental to tidyverse workflows. It allows you to chain operations together in a readable way.\n\n### Understanding the Problem with Nested Functions\n\nIn traditional R programming, when you need to apply multiple functions to data, you end up with deeply nested function calls that are read from the inside out. This creates several problems:\n\n1. **Readability**: The order of operations is reversed from how we naturally think about them\n2. **Debugging**: It's hard to inspect intermediate results\n3. **Modification**: Adding or removing steps requires careful parenthesis management\n\n### Traditional R vs Piped Approach\n\nLet's look at a simple example where we want to:\n1. Take a vector of numbers\n2. Calculate the square root of each\n3. Find the mean\n4. Round to 2 decimal places\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Traditional nested approach (hard to read)\n# We read this from inside-out: first sqrt, then mean, then round\n# But we write it outside-in!\nround(mean(sqrt(c(1, 4, 9, 16, 25))), 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# With pipes (much clearer!)\n# We read AND write this in the order operations happen\nc(1, 4, 9, 16, 25) %>%\n  sqrt() %>%         # First: take square root\n  mean() %>%         # Then: calculate mean\n  round(2)           # Finally: round to 2 decimals\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using the native R pipe (R 4.1+)\n# The |> operator is built into base R as of version 4.1\n# It works similarly to %>% but with some subtle differences\nc(1, 4, 9, 16, 25) |>\n  sqrt() |>\n  mean() |>\n  round(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nNotice how the piped version reads like a recipe: \"Take these numbers, THEN calculate square root, THEN find the mean, THEN round.\" This matches our mental model of the data transformation process.\n\n### How the Pipe Actually Works\n\nThe pipe operator takes the output of the expression on its left and passes it as the first argument to the function on its right. So `x %>% f()` is equivalent to `f(x)`, and `x %>% f() %>% g()` is equivalent to `g(f(x))`.\n\nYou can also use the `.` placeholder to specify where the piped value should go if it's not the first argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the dot placeholder for custom positioning\n10 %>% \n  `/`(2) %>%      # 10 / 2 = 5\n  `+`(3) %>%      # 5 + 3 = 8  \n  `^`(2)          # 8^2 = 64\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 64\n```\n\n\n:::\n\n```{.r .cell-code}\n# When the piped value isn't the first argument\n5 %>% \n  seq(from = 1, to = .)  # Creates sequence from 1 to 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\n# More practical example with data\nmtcars %>%\n  lm(mpg ~ cyl + wt, data = .)  # data = . puts the piped data in the right place\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = mpg ~ cyl + wt, data = .)\n\nCoefficients:\n(Intercept)          cyl           wt  \n     39.686       -1.508       -3.191  \n```\n\n\n:::\n:::\n\n\n### Practical Example with Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load a built-in dataset\ndata(mtcars)\n\n# Without pipes - nested and hard to read\nhead(arrange(filter(mtcars, cyl == 6), desc(mpg)), 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMerc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n```\n\n\n:::\n\n```{.r .cell-code}\n# With pipes - clear and sequential\nmtcars %>%\n  filter(cyl == 6) %>%\n  arrange(desc(mpg)) %>%\n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMerc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n```\n\n\n:::\n:::\n\n\n## Tibbles: Modern Data Frames\n\nTibbles are the tidyverse's enhanced version of data frames.\n\n### Creating Tibbles\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a tibble from scratch\nmy_tibble <- tibble(\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\"),\n  age = c(25, 30, 35, 28),\n  score = c(85.5, 92.3, 78.9, 88.1),\n  passed = c(TRUE, TRUE, FALSE, TRUE)\n)\n\nmy_tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 4\n  name      age score passed\n  <chr>   <dbl> <dbl> <lgl> \n1 Alice      25  85.5 TRUE  \n2 Bob        30  92.3 TRUE  \n3 Charlie    35  78.9 FALSE \n4 Diana      28  88.1 TRUE  \n```\n\n\n:::\n:::\n\n\n### Tibble vs Data Frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert data frame to tibble\nmtcars_tibble <- as_tibble(mtcars)\n\n# Compare printing\nprint(\"Data frame (first 6 rows shown by default):\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Data frame (first 6 rows shown by default):\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(\"Tibble (shows what fits on screen):\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tibble (shows what fits on screen):\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars_tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 Ã— 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# â„¹ 22 more rows\n```\n\n\n:::\n:::\n\n\n### Key Advantages of Tibbles\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tibbles preserve data types\ndf <- data.frame(x = 1:3, y = c(\"a\", \"b\", \"c\"))\ntb <- tibble(x = 1:3, y = c(\"a\", \"b\", \"c\"))\n\n# Data frame converts strings to factors (in older R versions)\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  2 variables:\n $ x: int  1 2 3\n $ y: chr  \"a\" \"b\" \"c\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(tb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [3 Ã— 2] (S3: tbl_df/tbl/data.frame)\n $ x: int [1:3] 1 2 3\n $ y: chr [1:3] \"a\" \"b\" \"c\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Tibbles handle column names better\nweird_tb <- tibble(\n  `First Name` = c(\"John\", \"Jane\"),\n  `2020` = c(100, 200),\n  `:)` = c(\"happy\", \"sad\")\n)\nweird_tb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 3\n  `First Name` `2020` `:)` \n  <chr>         <dbl> <chr>\n1 John            100 happy\n2 Jane            200 sad  \n```\n\n\n:::\n:::\n\n\n## Tidy Data Principles\n\nTidy data is a standard way of organizing data values within a dataset.\n\n### The Three Rules of Tidy Data\n\n1. Each variable must have its own column\n2. Each observation must have its own row\n3. Each value must have its own cell\n\n### Example: Messy vs Tidy Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Messy data\nmessy_data <- tibble(\n  student = c(\"Alice\", \"Bob\", \"Charlie\"),\n  midterm = c(85, 90, 78),\n  final = c(88, 85, 92)\n)\n\nprint(\"Messy data (wide format):\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Messy data (wide format):\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmessy_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 3\n  student midterm final\n  <chr>     <dbl> <dbl>\n1 Alice        85    88\n2 Bob          90    85\n3 Charlie      78    92\n```\n\n\n:::\n\n```{.r .cell-code}\n# Tidy data\ntidy_data <- messy_data %>%\n  pivot_longer(\n    cols = c(midterm, final),\n    names_to = \"exam\",\n    values_to = \"score\"\n  )\n\nprint(\"Tidy data (long format):\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tidy data (long format):\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntidy_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 3\n  student exam    score\n  <chr>   <chr>   <dbl>\n1 Alice   midterm    85\n2 Alice   final      88\n3 Bob     midterm    90\n4 Bob     final      85\n5 Charlie midterm    78\n6 Charlie final      92\n```\n\n\n:::\n:::\n\n\n## Working with Real Data\n\nLet's practice with a real dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the palmerpenguins package for example data\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n\n# Explore the penguins dataset\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelâ€¦\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerseâ€¦\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, â€¦\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, â€¦\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186â€¦\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, â€¦\n$ sex               <fct> male, female, female, NA, female, male, female, maleâ€¦\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007â€¦\n```\n\n\n:::\n\n```{.r .cell-code}\n# Basic exploration\npenguins %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n```\n\n\n:::\n:::\n\n\n### Data Exploration Pipeline\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete analysis pipeline\npenguins %>%\n  drop_na() %>%  # Remove missing values\n  group_by(species, island) %>%\n  summarise(\n    count = n(),\n    avg_bill_length = mean(bill_length_mm),\n    avg_body_mass = mean(body_mass_g),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(avg_body_mass))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 5\n  species   island    count avg_bill_length avg_body_mass\n  <fct>     <fct>     <int>           <dbl>         <dbl>\n1 Gentoo    Biscoe      119            47.6         5092.\n2 Chinstrap Dream        68            48.8         3733.\n3 Adelie    Biscoe       44            39.0         3710.\n4 Adelie    Torgersen    47            39.0         3709.\n5 Adelie    Dream        55            38.5         3701.\n```\n\n\n:::\n:::\n\n\n## Visualization Preview\n\nA quick taste of ggplot2 (covered in detail in Chapter 5):\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  drop_na() %>%\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point(size = 3, alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(\n    title = \"Penguin Body Mass vs Flipper Length\",\n    x = \"Flipper Length (mm)\",\n    y = \"Body Mass (g)\",\n    color = \"Species\"\n  ) +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set2\")\n```\n\n::: {.cell-output-display}\n![](01-introduction_files/figure-html/unnamed-chunk-11-1.png){width=768}\n:::\n:::\n\n\n## Common Tidyverse Patterns\n\n### Pattern 1: Read, Clean, Transform, Visualize\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Typical workflow\npenguins %>%\n  # Clean\n  drop_na() %>%\n  filter(year == 2008) %>%\n  # Transform\n  mutate(\n    body_mass_kg = body_mass_g / 1000,\n    size_category = case_when(\n      body_mass_kg < 3.5 ~ \"Small\",\n      body_mass_kg < 4.5 ~ \"Medium\",\n      TRUE ~ \"Large\"\n    )\n  ) %>%\n  # Summarize\n  group_by(species, size_category) %>%\n  summarise(count = n(), .groups = \"drop\") %>%\n  # Visualize\n  ggplot(aes(x = species, y = count, fill = size_category)) +\n  geom_col(position = \"dodge\") +\n  theme_minimal() +\n  labs(title = \"Penguin Size Distribution by Species (2008)\")\n```\n\n::: {.cell-output-display}\n![](01-introduction_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Pattern 2: Multiple Operations with Groups\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complex grouped operations\npenguins %>%\n  drop_na() %>%\n  group_by(species) %>%\n  mutate(\n    bill_length_z = (bill_length_mm - mean(bill_length_mm)) / sd(bill_length_mm),\n    bill_depth_z = (bill_depth_mm - mean(bill_depth_mm)) / sd(bill_depth_mm)\n  ) %>%\n  filter(abs(bill_length_z) < 2 & abs(bill_depth_z) < 2) %>%  # Remove outliers\n  summarise(\n    n = n(),\n    correlation = cor(bill_length_mm, bill_depth_mm),\n    .groups = \"drop\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 3\n  species       n correlation\n  <fct>     <int>       <dbl>\n1 Adelie      135       0.290\n2 Chinstrap    63       0.673\n3 Gentoo      110       0.627\n```\n\n\n:::\n:::\n\n\n## Exercises\n\n### Exercise 1: Basic Pipe Operations\n\nCreate a pipeline that:\n1. Takes the numbers 1 to 100\n2. Keeps only even numbers\n3. Squares each number\n4. Calculates the mean\n5. Takes the square root of the result\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here\n1:100 %>%\n  keep(~ . %% 2 == 0) %>%  # Keep even numbers\n  map_dbl(~ .^2) %>%        # Square each\n  mean() %>%                # Calculate mean\n  sqrt()                    # Take square root\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 58.60034\n```\n\n\n:::\n:::\n\n\n### Exercise 2: Tibble Creation and Manipulation\n\nCreate a tibble with information about 5 books (title, author, year, pages, rating). Then:\n1. Filter books published after 2000\n2. Add a column for reading_time (assuming 1 page per minute)\n3. Arrange by rating (descending)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here\nbooks <- tibble(\n  title = c(\"The Great Gatsby\", \"1984\", \"The Hunger Games\", \"Dune\", \"Project Hail Mary\"),\n  author = c(\"F. Scott Fitzgerald\", \"George Orwell\", \"Suzanne Collins\", \"Frank Herbert\", \"Andy Weir\"),\n  year = c(1925, 1949, 2008, 1965, 2021),\n  pages = c(180, 328, 374, 688, 476),\n  rating = c(4.5, 4.8, 4.3, 4.7, 4.9)\n)\n\nbooks %>%\n  filter(year > 2000) %>%\n  mutate(reading_time_hours = pages / 60) %>%\n  arrange(desc(rating))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 6\n  title             author           year pages rating reading_time_hours\n  <chr>             <chr>           <dbl> <dbl>  <dbl>              <dbl>\n1 Project Hail Mary Andy Weir        2021   476    4.9               7.93\n2 The Hunger Games  Suzanne Collins  2008   374    4.3               6.23\n```\n\n\n:::\n:::\n\n\n### Exercise 3: Working with Penguins Data\n\nUsing the penguins dataset:\n1. Calculate the average bill length for each species on each island\n2. Find which species-island combination has the longest average bill\n3. Create a summary showing min, max, and mean body mass for each species\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here\n# Part 1 & 2\npenguins %>%\n  drop_na(bill_length_mm) %>%\n  group_by(species, island) %>%\n  summarise(\n    avg_bill_length = mean(bill_length_mm),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(avg_bill_length))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 3\n  species   island    avg_bill_length\n  <fct>     <fct>               <dbl>\n1 Chinstrap Dream                48.8\n2 Gentoo    Biscoe               47.5\n3 Adelie    Biscoe               39.0\n4 Adelie    Torgersen            39.0\n5 Adelie    Dream                38.5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Part 3\npenguins %>%\n  drop_na(body_mass_g) %>%\n  group_by(species) %>%\n  summarise(\n    min_mass = min(body_mass_g),\n    mean_mass = mean(body_mass_g),\n    max_mass = max(body_mass_g),\n    .groups = \"drop\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 4\n  species   min_mass mean_mass max_mass\n  <fct>        <int>     <dbl>    <int>\n1 Adelie        2850     3701.     4775\n2 Chinstrap     2700     3733.     4800\n3 Gentoo        3950     5076.     6300\n```\n\n\n:::\n:::\n\n\n### Exercise 4: Tidy Data Challenge\n\nConvert this wide dataset to tidy format and calculate the average score for each subject:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Given data\nstudent_scores <- tibble(\n  student_id = 1:5,\n  math_score = c(85, 92, 78, 95, 88),\n  science_score = c(90, 88, 85, 92, 91),\n  english_score = c(88, 85, 90, 87, 89)\n)\n\n# Your code here\nstudent_scores %>%\n  pivot_longer(\n    cols = ends_with(\"_score\"),\n    names_to = \"subject\",\n    values_to = \"score\",\n    names_pattern = \"(.*)_score\"\n  ) %>%\n  group_by(subject) %>%\n  summarise(\n    avg_score = mean(score),\n    .groups = \"drop\"\n  ) %>%\n  arrange(desc(avg_score))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  subject avg_score\n  <chr>       <dbl>\n1 science      89.2\n2 english      87.8\n3 math         87.6\n```\n\n\n:::\n:::\n\n\n## Summary\n\nIn this chapter, you learned:\n\nâœ… The tidyverse philosophy and ecosystem  \nâœ… How to use the pipe operator for readable code  \nâœ… Working with tibbles instead of data frames  \nâœ… Tidy data principles  \nâœ… Basic data manipulation patterns  \n\n## What's Next?\n\nIn [Chapter 2](02-data-import.Rmd), we'll dive deep into importing data from various sources using readr and other packages. You'll learn to read CSV, Excel, JSON, and database files efficiently.\n\n## Additional Resources\n\n- [R for Data Science (2e)](https://r4ds.hadley.nz/)\n- [Tidyverse Style Guide](https://style.tidyverse.org/)\n- [Tidyverse Cheat Sheets](https://www.rstudio.com/resources/cheatsheets/)\n- [Advanced R](https://adv-r.hadley.nz/)\n",
    "supporting": [
      "01-introduction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}