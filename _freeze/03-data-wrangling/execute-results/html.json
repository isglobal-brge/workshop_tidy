{
  "hash": "c072bb98294556238847e8c77bdb6b7c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 3: Data Wrangling with dplyr\"\ndate: today\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n---\n\n## Learning Objectives\n\nBy the end of this chapter, you will master:\n\n- The five key dplyr verbs: `filter()`, `select()`, `mutate()`, `arrange()`, `summarise()`\n- Grouped operations with `group_by()`\n- Joining tables with `*_join()` functions\n- Window functions and ranking\n- Advanced selection helpers\n- Row-wise operations\n- Working with databases using dplyr\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.4     v readr     2.1.5\nv forcats   1.0.0     v stringr   1.5.2\nv ggplot2   4.0.0     v tibble    3.3.0\nv lubridate 1.9.4     v tidyr     1.3.1\nv purrr     1.1.0     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(nycflights13)\nlibrary(gapminder)\n\n# We'll use these datasets throughout\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel~\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse~\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ~\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ~\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186~\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ~\n$ sex               <fct> male, female, female, NA, female, male, female, male~\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007~\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2~\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, ~\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, ~\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1~\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,~\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,~\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1~\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"~\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4~\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394~\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",~\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",~\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1~\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, ~\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6~\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0~\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0~\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,704\nColumns: 6\n$ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", ~\n$ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, ~\n$ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, ~\n$ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8~\n$ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12~\n$ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, ~\n```\n\n\n:::\n:::\n\n\n## The Core dplyr Verbs\n\n### 1. filter() - Keep Rows That Match Conditions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple filtering\npenguins %>%\n  filter(species == \"Adelie\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 152 x 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# i 142 more rows\n# i 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple conditions (AND)\npenguins %>%\n  filter(species == \"Adelie\", bill_length_mm > 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 x 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           40.3          18                 195        3250\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           41.1          17.6               182        3200\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Torgersen           46            21.5               194        4200\n 6 Adelie  Biscoe              40.6          18.6               183        3550\n 7 Adelie  Biscoe              40.5          17.9               187        3200\n 8 Adelie  Biscoe              40.5          18.9               180        3950\n 9 Adelie  Dream               40.9          18.9               184        3900\n10 Adelie  Dream               42.2          18.5               180        3550\n# i 41 more rows\n# i 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# OR conditions\npenguins %>%\n  filter(species == \"Adelie\" | species == \"Gentoo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 276 x 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# i 266 more rows\n# i 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using %in% for multiple values\npenguins %>%\n  filter(species %in% c(\"Adelie\", \"Gentoo\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 276 x 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# i 266 more rows\n# i 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Complex conditions\npenguins %>%\n  filter(\n    bill_length_mm > 45,\n    flipper_length_mm < 210,\n    !is.na(sex)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 68 x 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           46            21.5               194        4200\n 2 Adelie  Torgersen           45.8          18.9               197        4150\n 3 Adelie  Biscoe              45.6          20.3               191        4600\n 4 Gentoo  Biscoe              46.2          14.5               209        4800\n 5 Gentoo  Biscoe              45.1          14.5               207        5050\n 6 Gentoo  Biscoe              48.7          15.7               208        5350\n 7 Gentoo  Biscoe              45.3          13.8               208        4200\n 8 Gentoo  Biscoe              47.5          14.2               209        4600\n 9 Gentoo  Biscoe              48.4          14.4               203        4625\n10 Gentoo  Biscoe              48.1          15.1               209        5500\n# i 58 more rows\n# i 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Filter with between\nflights %>%\n  filter(between(dep_delay, 10, 30)) %>%\n  select(dep_delay, carrier, flight) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 3\n   dep_delay carrier flight\n       <dbl> <chr>    <int>\n 1        11 UA         303\n 2        13 AA        1837\n 3        24 EV        4144\n 4        13 AA          33\n 5        13 DL         495\n 6        11 UA        1626\n 7        23 UA        1643\n 8        12 AA         647\n 9        14 UA         783\n10        15 B6        1305\n```\n\n\n:::\n:::\n\n\n### 2. select() - Choose Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select specific columns\npenguins %>%\n  select(species, island, bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 x 3\n   species island    bill_length_mm\n   <fct>   <fct>              <dbl>\n 1 Adelie  Torgersen           39.1\n 2 Adelie  Torgersen           39.5\n 3 Adelie  Torgersen           40.3\n 4 Adelie  Torgersen           NA  \n 5 Adelie  Torgersen           36.7\n 6 Adelie  Torgersen           39.3\n 7 Adelie  Torgersen           38.9\n 8 Adelie  Torgersen           39.2\n 9 Adelie  Torgersen           34.1\n10 Adelie  Torgersen           42  \n# i 334 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select range of columns\npenguins %>%\n  select(species:body_mass_g) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 6\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n```\n\n\n:::\n\n```{.r .cell-code}\n# Exclude columns\npenguins %>%\n  select(-year, -sex) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 6\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select with helpers\npenguins %>%\n  select(starts_with(\"bill\")) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  bill_length_mm bill_depth_mm\n           <dbl>         <dbl>\n1           39.1          18.7\n2           39.5          17.4\n3           40.3          18  \n```\n\n\n:::\n\n```{.r .cell-code}\npenguins %>%\n  select(ends_with(\"mm\")) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  bill_length_mm bill_depth_mm flipper_length_mm\n           <dbl>         <dbl>             <int>\n1           39.1          18.7               181\n2           39.5          17.4               186\n3           40.3          18                 195\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins %>%\n  select(contains(\"length\")) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  bill_length_mm flipper_length_mm\n           <dbl>             <int>\n1           39.1               181\n2           39.5               186\n3           40.3               195\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select and rename\npenguins %>%\n  select(\n    penguin_species = species,\n    island_name = island,\n    bill_len = bill_length_mm\n  ) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  penguin_species island_name bill_len\n  <fct>           <fct>          <dbl>\n1 Adelie          Torgersen       39.1\n2 Adelie          Torgersen       39.5\n3 Adelie          Torgersen       40.3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Reorder columns\npenguins %>%\n  select(island, species, everything()) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 8\n  island    species bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>     <fct>            <dbl>         <dbl>             <int>       <int>\n1 Torgersen Adelie            39.1          18.7               181        3750\n2 Torgersen Adelie            39.5          17.4               186        3800\n3 Torgersen Adelie            40.3          18                 195        3250\n# i 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n### 3. mutate() - Create or Transform Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create new columns\npenguins %>%\n  mutate(\n    bill_ratio = bill_length_mm / bill_depth_mm,\n    body_mass_kg = body_mass_g / 1000,\n    size_category = case_when(\n      body_mass_g < 3500 ~ \"Small\",\n      body_mass_g < 4500 ~ \"Medium\",\n      TRUE ~ \"Large\"\n    )\n  ) %>%\n  select(species, bill_ratio, body_mass_kg, size_category) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 4\n   species bill_ratio body_mass_kg size_category\n   <fct>        <dbl>        <dbl> <chr>        \n 1 Adelie        2.09         3.75 Medium       \n 2 Adelie        2.27         3.8  Medium       \n 3 Adelie        2.24         3.25 Small        \n 4 Adelie       NA           NA    Large        \n 5 Adelie        1.90         3.45 Small        \n 6 Adelie        1.91         3.65 Medium       \n 7 Adelie        2.19         3.62 Medium       \n 8 Adelie        2            4.68 Large        \n 9 Adelie        1.88         3.48 Small        \n10 Adelie        2.08         4.25 Medium       \n```\n\n\n:::\n\n```{.r .cell-code}\n# Modify existing columns\npenguins %>%\n  mutate(\n    species = str_to_upper(species),\n    island = factor(island, levels = c(\"Biscoe\", \"Dream\", \"Torgersen\"))\n  ) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 ADELIE  Torgersen           39.1          18.7               181        3750\n2 ADELIE  Torgersen           39.5          17.4               186        3800\n3 ADELIE  Torgersen           40.3          18                 195        3250\n# i 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple transformations\nflights %>%\n  mutate(\n    speed = distance / air_time * 60,  # miles per hour\n    dep_delay_hours = dep_delay / 60,\n    on_time = if_else(dep_delay <= 0, \"On Time\", \"Delayed\"),\n    delay_category = cut(\n      dep_delay,\n      breaks = c(-Inf, 0, 15, 60, Inf),\n      labels = c(\"Early\", \"On Time\", \"Minor Delay\", \"Major Delay\")\n    )\n  ) %>%\n  select(carrier, flight, speed, on_time, delay_category) %>%\n  drop_na() %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 5\n   carrier flight speed on_time delay_category\n   <chr>    <int> <dbl> <chr>   <fct>         \n 1 UA        1545  370. Delayed On Time       \n 2 UA        1714  374. Delayed On Time       \n 3 AA        1141  408. Delayed On Time       \n 4 B6         725  517. On Time Early         \n 5 DL         461  394. On Time Early         \n 6 UA        1696  288. On Time Early         \n 7 B6         507  404. On Time Early         \n 8 EV        5708  259. On Time Early         \n 9 B6          79  405. On Time Early         \n10 AA         301  319. On Time Early         \n```\n\n\n:::\n:::\n\n\n### 4. arrange() - Sort Rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple sorting\npenguins %>%\n  arrange(bill_length_mm) %>%\n  select(species, bill_length_mm) %>%\n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 2\n  species bill_length_mm\n  <fct>            <dbl>\n1 Adelie            32.1\n2 Adelie            33.1\n3 Adelie            33.5\n4 Adelie            34  \n5 Adelie            34.1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Descending order\npenguins %>%\n  arrange(desc(body_mass_g)) %>%\n  select(species, body_mass_g) %>%\n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 2\n  species body_mass_g\n  <fct>         <int>\n1 Gentoo         6300\n2 Gentoo         6050\n3 Gentoo         6000\n4 Gentoo         6000\n5 Gentoo         5950\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple columns\npenguins %>%\n  arrange(species, desc(body_mass_g)) %>%\n  select(species, island, body_mass_g) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 3\n   species island    body_mass_g\n   <fct>   <fct>           <int>\n 1 Adelie  Biscoe           4775\n 2 Adelie  Biscoe           4725\n 3 Adelie  Torgersen        4700\n 4 Adelie  Torgersen        4675\n 5 Adelie  Dream            4650\n 6 Adelie  Dream            4600\n 7 Adelie  Biscoe           4600\n 8 Adelie  Torgersen        4500\n 9 Adelie  Dream            4475\n10 Adelie  Torgersen        4450\n```\n\n\n:::\n\n```{.r .cell-code}\n# Handle NAs\npenguins %>%\n  arrange(desc(is.na(sex)), sex, body_mass_g) %>%\n  select(sex, body_mass_g) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 2\n   sex   body_mass_g\n   <fct>       <int>\n 1 <NA>         2975\n 2 <NA>         3300\n 3 <NA>         3475\n 4 <NA>         3700\n 5 <NA>         4100\n 6 <NA>         4250\n 7 <NA>         4650\n 8 <NA>         4725\n 9 <NA>         4875\n10 <NA>           NA\n```\n\n\n:::\n:::\n\n\n### 5. summarise() - Aggregate Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic summary\npenguins %>%\n  summarise(\n    count = n(),\n    avg_mass = mean(body_mass_g, na.rm = TRUE),\n    sd_mass = sd(body_mass_g, na.rm = TRUE),\n    min_mass = min(body_mass_g, na.rm = TRUE),\n    max_mass = max(body_mass_g, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 5\n  count avg_mass sd_mass min_mass max_mass\n  <int>    <dbl>   <dbl>    <int>    <int>\n1   344    4202.    802.     2700     6300\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple statistics\nflights %>%\n  summarise(\n    total_flights = n(),\n    total_distance = sum(distance, na.rm = TRUE),\n    avg_delay = mean(dep_delay, na.rm = TRUE),\n    median_delay = median(dep_delay, na.rm = TRUE),\n    pct_delayed = mean(dep_delay > 0, na.rm = TRUE) * 100\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 5\n  total_flights total_distance avg_delay median_delay pct_delayed\n          <int>          <dbl>     <dbl>        <dbl>       <dbl>\n1        336776      350217607      12.6           -2        39.1\n```\n\n\n:::\n:::\n\n\n## Grouped Operations\n\n### group_by() - The Power of Groups\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by single variable\npenguins %>%\n  group_by(species) %>%\n  summarise(\n    count = n(),\n    avg_bill_length = mean(bill_length_mm, na.rm = TRUE),\n    avg_body_mass = mean(body_mass_g, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  species   count avg_bill_length avg_body_mass\n  <fct>     <int>           <dbl>         <dbl>\n1 Adelie      152            38.8         3701.\n2 Chinstrap    68            48.8         3733.\n3 Gentoo      124            47.5         5076.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Group by multiple variables\npenguins %>%\n  group_by(species, island) %>%\n  summarise(\n    count = n(),\n    avg_flipper_length = mean(flipper_length_mm, na.rm = TRUE),\n    .groups = \"drop\"  # Avoid warning about grouping\n  ) %>%\n  arrange(species, island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 4\n  species   island    count avg_flipper_length\n  <fct>     <fct>     <int>              <dbl>\n1 Adelie    Biscoe       44               189.\n2 Adelie    Dream        56               190.\n3 Adelie    Torgersen    52               191.\n4 Chinstrap Dream        68               196.\n5 Gentoo    Biscoe      124               217.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Grouped mutate (keep all rows)\npenguins %>%\n  group_by(species) %>%\n  mutate(\n    mass_z_score = (body_mass_g - mean(body_mass_g, na.rm = TRUE)) / \n                   sd(body_mass_g, na.rm = TRUE),\n    mass_pct_rank = percent_rank(body_mass_g)\n  ) %>%\n  select(species, body_mass_g, mass_z_score, mass_pct_rank) %>%\n  arrange(species, desc(body_mass_g)) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 4\n# Groups:   species [1]\n   species body_mass_g mass_z_score mass_pct_rank\n   <fct>         <int>        <dbl>         <dbl>\n 1 Adelie         4775         2.34         1    \n 2 Adelie         4725         2.23         0.993\n 3 Adelie         4700         2.18         0.987\n 4 Adelie         4675         2.12         0.98 \n 5 Adelie         4650         2.07         0.973\n 6 Adelie         4600         1.96         0.96 \n 7 Adelie         4600         1.96         0.96 \n 8 Adelie         4500         1.74         0.953\n 9 Adelie         4475         1.69         0.947\n10 Adelie         4450         1.63         0.933\n```\n\n\n:::\n\n```{.r .cell-code}\n# Complex grouped operations\nflights %>%\n  group_by(carrier, month) %>%\n  summarise(\n    flights = n(),\n    avg_delay = mean(dep_delay, na.rm = TRUE),\n    pct_on_time = mean(dep_delay <= 0, na.rm = TRUE) * 100,\n    .groups = \"drop\"\n  ) %>%\n  filter(flights >= 100) %>%  # Only carriers with 100+ flights per month\n  arrange(desc(pct_on_time)) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 5\n   carrier month flights avg_delay pct_on_time\n   <chr>   <int>   <int>     <dbl>       <dbl>\n 1 US         10    1846     0.141        81.7\n 2 US          9    1698     1.96         81.5\n 3 US          2    1552     0.980        80.2\n 4 DL          1    3690     3.85         78.2\n 5 US          1    1602     1.82         77.6\n 6 US         11    1699     0.576        77.4\n 7 DL         11    3849     2.85         77.1\n 8 FL          1     328     1.97         76.5\n 9 US          3    1721     2.72         76.4\n10 DL          9    3883     5.53         76.3\n```\n\n\n:::\n:::\n\n\n### Advanced Grouping Techniques\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by computed values\npenguins %>%\n  group_by(\n    size_class = cut(body_mass_g, \n                     breaks = quantile(body_mass_g, probs = 0:4/4, na.rm = TRUE),\n                     labels = c(\"Q1\", \"Q2\", \"Q3\", \"Q4\"),\n                     include.lowest = TRUE)\n  ) %>%\n  summarise(\n    count = n(),\n    species_diversity = n_distinct(species),\n    avg_bill_length = mean(bill_length_mm, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 4\n  size_class count species_diversity avg_bill_length\n  <fct>      <int>             <int>           <dbl>\n1 Q1            89                 2            39.9\n2 Q2            87                 3            43.2\n3 Q3            81                 3            44.4\n4 Q4            85                 3            48.5\n5 <NA>           2                 2           NaN  \n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple grouping sets\ngapminder %>%\n  filter(year %in% c(1952, 2007)) %>%\n  group_by(continent, year) %>%\n  summarise(\n    countries = n(),\n    total_pop = sum(pop) / 1e9,  # in billions\n    avg_lifeExp = weighted.mean(lifeExp, pop),\n    median_gdpPercap = median(gdpPercap),\n    .groups = \"drop\"\n  ) %>%\n  arrange(continent, year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 6\n   continent  year countries total_pop avg_lifeExp median_gdpPercap\n   <fct>     <int>     <int>     <dbl>       <dbl>            <dbl>\n 1 Africa     1952        52    0.238         38.8             987.\n 2 Africa     2007        52    0.930         54.6            1452.\n 3 Americas   1952        25    0.345         60.2            3048.\n 4 Americas   2007        25    0.899         75.4            8948.\n 5 Asia       1952        33    1.40          42.9            1207.\n 6 Asia       2007        33    3.81          69.4            4471.\n 7 Europe     1952        30    0.418         64.9            5142.\n 8 Europe     2007        30    0.586         77.9           28054.\n 9 Oceania    1952         2    0.0107        69.2           10298.\n10 Oceania    2007         2    0.0245        81.1           29810.\n```\n\n\n:::\n:::\n\n\n## Joining Tables\n\n### Creating Sample Data for Joins\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create sample datasets\ncustomers <- tibble(\n  customer_id = 1:5,\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"),\n  city = c(\"NYC\", \"LA\", \"Chicago\", \"Houston\", \"Phoenix\")\n)\n\norders <- tibble(\n  order_id = 101:108,\n  customer_id = c(1, 2, 1, 3, 4, 2, 5, 6),  # Note: customer 6 doesn't exist\n  product = c(\"Widget\", \"Gadget\", \"Widget\", \"Doohickey\", \n              \"Gadget\", \"Widget\", \"Doohickey\", \"Widget\"),\n  amount = c(100, 200, 150, 300, 250, 175, 400, 125)\n)\n\ncustomer_categories <- tibble(\n  customer_id = c(1, 2, 3, 5),  # Note: missing customer 4\n  category = c(\"Premium\", \"Standard\", \"Premium\", \"Standard\")\n)\n\nprint(\"Customers:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Customers:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncustomers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 3\n  customer_id name    city   \n        <int> <chr>   <chr>  \n1           1 Alice   NYC    \n2           2 Bob     LA     \n3           3 Charlie Chicago\n4           4 Diana   Houston\n5           5 Eve     Phoenix\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(\"Orders:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Orders:\"\n```\n\n\n:::\n\n```{.r .cell-code}\norders\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 4\n  order_id customer_id product   amount\n     <int>       <dbl> <chr>      <dbl>\n1      101           1 Widget       100\n2      102           2 Gadget       200\n3      103           1 Widget       150\n4      104           3 Doohickey    300\n5      105           4 Gadget       250\n6      106           2 Widget       175\n7      107           5 Doohickey    400\n8      108           6 Widget       125\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(\"Categories:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Categories:\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncustomer_categories\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 2\n  customer_id category\n        <dbl> <chr>   \n1           1 Premium \n2           2 Standard\n3           3 Premium \n4           5 Standard\n```\n\n\n:::\n:::\n\n\n### Types of Joins\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inner join - only matching records\ninner_join(customers, orders, by = \"customer_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 x 6\n  customer_id name    city    order_id product   amount\n        <dbl> <chr>   <chr>      <int> <chr>      <dbl>\n1           1 Alice   NYC          101 Widget       100\n2           1 Alice   NYC          103 Widget       150\n3           2 Bob     LA           102 Gadget       200\n4           2 Bob     LA           106 Widget       175\n5           3 Charlie Chicago      104 Doohickey    300\n6           4 Diana   Houston      105 Gadget       250\n7           5 Eve     Phoenix      107 Doohickey    400\n```\n\n\n:::\n\n```{.r .cell-code}\n# Left join - all from left, matching from right\nleft_join(customers, orders, by = \"customer_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 x 6\n  customer_id name    city    order_id product   amount\n        <dbl> <chr>   <chr>      <int> <chr>      <dbl>\n1           1 Alice   NYC          101 Widget       100\n2           1 Alice   NYC          103 Widget       150\n3           2 Bob     LA           102 Gadget       200\n4           2 Bob     LA           106 Widget       175\n5           3 Charlie Chicago      104 Doohickey    300\n6           4 Diana   Houston      105 Gadget       250\n7           5 Eve     Phoenix      107 Doohickey    400\n```\n\n\n:::\n\n```{.r .cell-code}\n# Right join - all from right, matching from left\nright_join(customers, orders, by = \"customer_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 6\n  customer_id name    city    order_id product   amount\n        <dbl> <chr>   <chr>      <int> <chr>      <dbl>\n1           1 Alice   NYC          101 Widget       100\n2           1 Alice   NYC          103 Widget       150\n3           2 Bob     LA           102 Gadget       200\n4           2 Bob     LA           106 Widget       175\n5           3 Charlie Chicago      104 Doohickey    300\n6           4 Diana   Houston      105 Gadget       250\n7           5 Eve     Phoenix      107 Doohickey    400\n8           6 <NA>    <NA>         108 Widget       125\n```\n\n\n:::\n\n```{.r .cell-code}\n# Full join - all records from both\nfull_join(customers, orders, by = \"customer_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 6\n  customer_id name    city    order_id product   amount\n        <dbl> <chr>   <chr>      <int> <chr>      <dbl>\n1           1 Alice   NYC          101 Widget       100\n2           1 Alice   NYC          103 Widget       150\n3           2 Bob     LA           102 Gadget       200\n4           2 Bob     LA           106 Widget       175\n5           3 Charlie Chicago      104 Doohickey    300\n6           4 Diana   Houston      105 Gadget       250\n7           5 Eve     Phoenix      107 Doohickey    400\n8           6 <NA>    <NA>         108 Widget       125\n```\n\n\n:::\n\n```{.r .cell-code}\n# Semi join - filter left table to matching records\nsemi_join(customers, orders, by = \"customer_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 3\n  customer_id name    city   \n        <int> <chr>   <chr>  \n1           1 Alice   NYC    \n2           2 Bob     LA     \n3           3 Charlie Chicago\n4           4 Diana   Houston\n5           5 Eve     Phoenix\n```\n\n\n:::\n\n```{.r .cell-code}\n# Anti join - filter left table to non-matching records\nanti_join(customers, orders, by = \"customer_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 x 3\n# i 3 variables: customer_id <int>, name <chr>, city <chr>\n```\n\n\n:::\n:::\n\n\n### Complex Joins\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Multiple join keys\nflights_weather <- flights %>%\n  select(year, month, day, hour, origin, dep_delay) %>%\n  left_join(\n    weather %>% select(year, month, day, hour, origin, temp, wind_speed),\n    by = c(\"year\", \"month\", \"day\", \"hour\", \"origin\")\n  ) %>%\n  drop_na() %>%\n  head(10)\n\nflights_weather\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 8\n    year month   day  hour origin dep_delay  temp wind_speed\n   <int> <int> <int> <dbl> <chr>      <dbl> <dbl>      <dbl>\n 1  2013     1     1     5 EWR            2  39.0       12.7\n 2  2013     1     1     5 LGA            4  39.9       15.0\n 3  2013     1     1     5 JFK            2  39.0       15.0\n 4  2013     1     1     5 JFK           -1  39.0       15.0\n 5  2013     1     1     6 LGA           -6  39.9       16.1\n 6  2013     1     1     5 EWR           -4  39.0       12.7\n 7  2013     1     1     6 EWR           -5  37.9       11.5\n 8  2013     1     1     6 LGA           -3  39.9       16.1\n 9  2013     1     1     6 JFK           -3  37.9       13.8\n10  2013     1     1     6 LGA           -2  39.9       16.1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Chain multiple joins\ncustomer_summary <- customers %>%\n  left_join(orders, by = \"customer_id\") %>%\n  left_join(customer_categories, by = \"customer_id\") %>%\n  group_by(customer_id, name, city, category) %>%\n  summarise(\n    total_orders = sum(!is.na(order_id)),\n    total_amount = sum(amount, na.rm = TRUE),\n    avg_order_value = mean(amount, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %>%\n  mutate(\n    category = replace_na(category, \"Unassigned\"),\n    customer_value = case_when(\n      total_amount >= 500 ~ \"High\",\n      total_amount >= 200 ~ \"Medium\",\n      total_amount > 0 ~ \"Low\",\n      TRUE ~ \"No Orders\"\n    )\n  )\n\ncustomer_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 8\n  customer_id name    city    category total_orders total_amount avg_order_value\n        <dbl> <chr>   <chr>   <chr>           <int>        <dbl>           <dbl>\n1           1 Alice   NYC     Premium             2          250            125 \n2           2 Bob     LA      Standard            2          375            188.\n3           3 Charlie Chicago Premium             1          300            300 \n4           4 Diana   Houston Unassig~            1          250            250 \n5           5 Eve     Phoenix Standard            1          400            400 \n# i 1 more variable: customer_value <chr>\n```\n\n\n:::\n:::\n\n\n## Window Functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ranking functions\npenguins %>%\n  drop_na() %>%\n  group_by(species) %>%\n  mutate(\n    mass_rank = rank(body_mass_g),\n    mass_dense_rank = dense_rank(body_mass_g),\n    mass_row_number = row_number(body_mass_g),\n    mass_percent = percent_rank(body_mass_g),\n    mass_ntile = ntile(body_mass_g, 4)\n  ) %>%\n  select(species, body_mass_g, starts_with(\"mass_\")) %>%\n  arrange(species, body_mass_g) %>%\n  head(15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 x 7\n# Groups:   species [1]\n   species body_mass_g mass_rank mass_dense_rank mass_row_number mass_percent\n   <fct>         <int>     <dbl>           <int>           <int>        <dbl>\n 1 Adelie         2850       1.5               1               1       0     \n 2 Adelie         2850       1.5               1               2       0     \n 3 Adelie         2900       4                 2               3       0.0138\n 4 Adelie         2900       4                 2               4       0.0138\n 5 Adelie         2900       4                 2               5       0.0138\n 6 Adelie         2925       6                 3               6       0.0345\n 7 Adelie         3000       7.5               4               7       0.0414\n 8 Adelie         3000       7.5               4               8       0.0414\n 9 Adelie         3050      10.5               5               9       0.0552\n10 Adelie         3050      10.5               5              10       0.0552\n11 Adelie         3050      10.5               5              11       0.0552\n12 Adelie         3050      10.5               5              12       0.0552\n13 Adelie         3075      13                 6              13       0.0828\n14 Adelie         3100      14                 7              14       0.0897\n15 Adelie         3150      16.5               8              15       0.0966\n# i 1 more variable: mass_ntile <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Lead and lag\ngapminder %>%\n  filter(country == \"United States\") %>%\n  arrange(year) %>%\n  mutate(\n    prev_gdp = lag(gdpPercap),\n    next_gdp = lead(gdpPercap),\n    gdp_growth = (gdpPercap - prev_gdp) / prev_gdp * 100,\n    gdp_change_5yr = gdpPercap - lag(gdpPercap, 2)  # 10 year change (data is every 5 years)\n  ) %>%\n  select(year, gdpPercap, prev_gdp, gdp_growth, gdp_change_5yr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 5\n    year gdpPercap prev_gdp gdp_growth gdp_change_5yr\n   <int>     <dbl>    <dbl>      <dbl>          <dbl>\n 1  1952    13990.      NA       NA               NA \n 2  1957    14847.   13990.       6.12            NA \n 3  1962    16173.   14847.       8.93          2183.\n 4  1967    19530.   16173.      20.8           4683.\n 5  1972    21806.   19530.      11.7           5633.\n 6  1977    24073.   21806.      10.4           4542.\n 7  1982    25010.   24073.       3.89          3204.\n 8  1987    29884.   25010.      19.5           5812.\n 9  1992    32004.   29884.       7.09          6994.\n10  1997    35767.   32004.      11.8           5883.\n11  2002    39097.   35767.       9.31          7093.\n12  2007    42952.   39097.       9.86          7184.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Cumulative functions\nflights %>%\n  filter(carrier == \"AA\", month == 1, day == 1) %>%\n  arrange(dep_time) %>%\n  mutate(\n    cumulative_flights = row_number(),\n    cumulative_distance = cumsum(distance),\n    cumulative_avg_distance = cummean(distance),\n    cumulative_max_delay = cummax(coalesce(dep_delay, 0))\n  ) %>%\n  select(dep_time, distance, dep_delay, starts_with(\"cumulative\")) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 7\n   dep_time distance dep_delay cumulative_flights cumulative_distance\n      <int>    <dbl>     <dbl>              <int>               <dbl>\n 1      542     1089         2                  1                1089\n 2      558      733        -2                  2                1822\n 3      559     1389        -1                  3                3211\n 4      606     1085        -4                  4                4296\n 5      623     1096        13                  5                5392\n 6      628     1598        -2                  6                6990\n 7      629      733        -1                  7                7723\n 8      635     1389         0                  8                9112\n 9      656      733        -4                  9                9845\n10      656      944        -3                 10               10789\n# i 2 more variables: cumulative_avg_distance <dbl>, cumulative_max_delay <dbl>\n```\n\n\n:::\n:::\n\n\n## Advanced Selection Techniques\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using where() for type-based selection\npenguins %>%\n  select(where(is.numeric)) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n           <dbl>         <dbl>             <int>       <int> <int>\n1           39.1          18.7               181        3750  2007\n2           39.5          17.4               186        3800  2007\n3           40.3          18                 195        3250  2007\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins %>%\n  select(where(is.factor)) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  species island    sex   \n  <fct>   <fct>     <fct> \n1 Adelie  Torgersen male  \n2 Adelie  Torgersen female\n3 Adelie  Torgersen female\n```\n\n\n:::\n\n```{.r .cell-code}\n# Custom selection functions\npenguins %>%\n  select(where(~ is.numeric(.) && mean(., na.rm = TRUE) > 100)) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  flipper_length_mm body_mass_g  year\n              <int>       <int> <int>\n1               181        3750  2007\n2               186        3800  2007\n3               195        3250  2007\n```\n\n\n:::\n\n```{.r .cell-code}\n# Combining selection helpers\npenguins %>%\n  select(\n    species,  # Specific column\n    starts_with(\"bill\"),  # Pattern matching\n    where(is.numeric) & contains(\"mm\")  # Combination\n  ) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  species bill_length_mm bill_depth_mm flipper_length_mm\n  <fct>            <dbl>         <dbl>             <int>\n1 Adelie            39.1          18.7               181\n2 Adelie            39.5          17.4               186\n3 Adelie            40.3          18                 195\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using all_of() and any_of()\nimportant_cols <- c(\"species\", \"island\", \"body_mass_g\")\noptional_cols <- c(\"sex\", \"year\", \"nonexistent_col\")\n\npenguins %>%\n  select(all_of(important_cols)) %>%  # Will error if column doesn't exist\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  species island    body_mass_g\n  <fct>   <fct>           <int>\n1 Adelie  Torgersen        3750\n2 Adelie  Torgersen        3800\n3 Adelie  Torgersen        3250\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins %>%\n  select(any_of(optional_cols)) %>%  # Won't error for missing columns\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  sex     year\n  <fct>  <int>\n1 male    2007\n2 female  2007\n3 female  2007\n```\n\n\n:::\n:::\n\n\n## Row-wise Operations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create sample data with list columns\nstudent_scores <- tibble(\n  student = c(\"Alice\", \"Bob\", \"Charlie\"),\n  math = c(85, 92, 78),\n  science = c(90, 88, 85),\n  english = c(88, 85, 90)\n)\n\n# Row-wise operations\nstudent_scores %>%\n  rowwise() %>%\n  mutate(\n    avg_score = mean(c(math, science, english)),\n    max_score = max(c(math, science, english)),\n    min_score = min(c(math, science, english)),\n    score_range = max_score - min_score\n  ) %>%\n  ungroup()  # Important to ungroup after rowwise\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 8\n  student  math science english avg_score max_score min_score score_range\n  <chr>   <dbl>   <dbl>   <dbl>     <dbl>     <dbl>     <dbl>       <dbl>\n1 Alice      85      90      88      87.7        90        85           5\n2 Bob        92      88      85      88.3        92        85           7\n3 Charlie    78      85      90      84.3        90        78          12\n```\n\n\n:::\n\n```{.r .cell-code}\n# Working with list columns\nnested_data <- tibble(\n  group = c(\"A\", \"B\", \"C\"),\n  values = list(\n    c(1, 2, 3, 4, 5),\n    c(10, 20, 30),\n    c(100, 200, 300, 400)\n  )\n)\n\nnested_data %>%\n  rowwise() %>%\n  mutate(\n    mean_value = mean(values),\n    sum_value = sum(values),\n    n_values = length(values)\n  ) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  group values    mean_value sum_value n_values\n  <chr> <list>         <dbl>     <dbl>    <int>\n1 A     <dbl [5]>          3        15        5\n2 B     <dbl [3]>         20        60        3\n3 C     <dbl [4]>        250      1000        4\n```\n\n\n:::\n:::\n\n\n## Combining Multiple Operations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complex data pipeline\npenguins %>%\n  # Remove missing values\n  drop_na() %>%\n  # Add computed columns\n  mutate(\n    bill_ratio = bill_length_mm / bill_depth_mm,\n    flipper_body_ratio = flipper_length_mm / (body_mass_g / 100)\n  ) %>%\n  # Group and summarize\n  group_by(species, island) %>%\n  summarise(\n    n_penguins = n(),\n    avg_bill_ratio = mean(bill_ratio),\n    sd_bill_ratio = sd(bill_ratio),\n    avg_flipper_ratio = mean(flipper_body_ratio),\n    .groups = \"drop\"\n  ) %>%\n  # Filter results\n  filter(n_penguins >= 5) %>%\n  # Add rankings\n  mutate(\n    bill_ratio_rank = dense_rank(desc(avg_bill_ratio)),\n    flipper_ratio_rank = dense_rank(desc(avg_flipper_ratio))\n  ) %>%\n  # Sort results\n  arrange(bill_ratio_rank)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 8\n  species   island    n_penguins avg_bill_ratio sd_bill_ratio avg_flipper_ratio\n  <fct>     <fct>          <int>          <dbl>         <dbl>             <dbl>\n1 Gentoo    Biscoe           119           3.18         0.169              4.30\n2 Chinstrap Dream             68           2.65         0.147              5.29\n3 Adelie    Biscoe            44           2.13         0.139              5.17\n4 Adelie    Torgersen         47           2.12         0.194              5.23\n5 Adelie    Dream             55           2.12         0.132              5.20\n# i 2 more variables: bill_ratio_rank <int>, flipper_ratio_rank <int>\n```\n\n\n:::\n:::\n\n\n## Working with Databases\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create in-memory SQLite database\nlibrary(DBI)\nlibrary(RSQLite)\n\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\n# Copy data to database\ncopy_to(con, penguins, \"penguins\", overwrite = TRUE)\ncopy_to(con, flights, \"flights\", overwrite = TRUE)\n\n# Create table references\npenguins_db <- tbl(con, \"penguins\")\nflights_db <- tbl(con, \"flights\")\n\n# dplyr operations are translated to SQL\npenguins_db %>%\n  filter(species == \"Adelie\") %>%\n  group_by(island) %>%\n  summarise(\n    count = n(),\n    avg_mass = mean(body_mass_g, na.rm = TRUE)\n  ) %>%\n  show_query()  # Show the SQL query\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<SQL>\nSELECT `island`, COUNT(*) AS `count`, AVG(`body_mass_g`) AS `avg_mass`\nFROM (\n  SELECT `penguins`.*\n  FROM `penguins`\n  WHERE (`species` = 'Adelie')\n) AS `q01`\nGROUP BY `island`\n```\n\n\n:::\n\n```{.r .cell-code}\n# Execute and collect results\nresult <- penguins_db %>%\n  filter(bill_length_mm > 45) %>%\n  select(species, island, bill_length_mm, body_mass_g) %>%\n  collect()  # Bring into R\n\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 165 x 4\n   species island    bill_length_mm body_mass_g\n   <chr>   <chr>              <dbl>       <int>\n 1 Adelie  Torgersen           46          4200\n 2 Adelie  Torgersen           45.8        4150\n 3 Adelie  Biscoe              45.6        4600\n 4 Gentoo  Biscoe              46.1        4500\n 5 Gentoo  Biscoe              50          5700\n 6 Gentoo  Biscoe              48.7        4450\n 7 Gentoo  Biscoe              50          5700\n 8 Gentoo  Biscoe              47.6        5400\n 9 Gentoo  Biscoe              46.5        4550\n10 Gentoo  Biscoe              45.4        4800\n# i 155 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Disconnect\ndbDisconnect(con)\n```\n:::\n\n\n## Performance Tips\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use data.table for very large datasets\n# install.packages(\"dtplyr\")\nlibrary(dtplyr)\n\n# Convert to data.table backend\npenguins_dt <- lazy_dt(penguins)\n\n# Operations are optimized for speed\nresult <- penguins_dt %>%\n  filter(species == \"Adelie\") %>%\n  group_by(island) %>%\n  summarise(avg_mass = mean(body_mass_g, na.rm = TRUE)) %>%\n  as_tibble()  # Convert back to tibble\n\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  island    avg_mass\n  <fct>        <dbl>\n1 Biscoe       3710.\n2 Dream        3688.\n3 Torgersen    3706.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Benchmarking example\nif (require(microbenchmark, quietly = TRUE)) {\n  # Create larger dataset\n  big_data <- penguins %>%\n    slice_sample(n = 10000, replace = TRUE)\n  \n  microbenchmark(\n    dplyr = big_data %>%\n      group_by(species) %>%\n      summarise(mean_mass = mean(body_mass_g, na.rm = TRUE)),\n    \n    dtplyr = lazy_dt(big_data) %>%\n      group_by(species) %>%\n      summarise(mean_mass = mean(body_mass_g, na.rm = TRUE)) %>%\n      as_tibble(),\n    \n    times = 10\n  )\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: milliseconds\n   expr      min       lq     mean   median       uq      max neval\n  dplyr 1.002696 1.025082 1.096135 1.053741 1.097488 1.460830    10\n dtplyr 1.814045 1.828477 1.965208 1.860683 1.937619 2.549216    10\n```\n\n\n:::\n:::\n\n\n## Exercises\n\n### Exercise 1: Complex Filtering\n\nUsing the flights dataset, find all flights that:\n- Departed from JFK\n- Were delayed by more than 30 minutes\n- Flew more than 1000 miles\n- Occurred in summer months (June, July, August)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your solution\nflights %>%\n  filter(\n    origin == \"JFK\",\n    dep_delay > 30,\n    distance > 1000,\n    month %in% c(6, 7, 8)\n  ) %>%\n  select(carrier, flight, dest, dep_delay, distance, month) %>%\n  arrange(desc(dep_delay)) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 6\n   carrier flight dest  dep_delay distance month\n   <chr>    <int> <chr>     <dbl>    <dbl> <int>\n 1 DL        2007 PDX         899     2454     6\n 2 DL         503 SAN         790     2446     6\n 3 VX         411 LAX         634     2475     7\n 4 VX          23 SFO         629     2586     7\n 5 DL         141 SFO         589     2586     7\n 6 DL        1543 SEA         504     2422     6\n 7 DL        1643 SEA         471     2422     7\n 8 B6         415 SFO         453     2586     7\n 9 DL         503 SAN         452     2446     7\n10 DL        1373 MIA         436     1089     8\n```\n\n\n:::\n:::\n\n\n### Exercise 2: Advanced Grouping\n\nUsing gapminder data, calculate for each continent and decade:\n- Number of countries\n- Total population\n- Average life expectancy (weighted by population)\n- GDP per capita range (max - min)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your solution\ngapminder %>%\n  mutate(decade = floor(year / 10) * 10) %>%\n  group_by(continent, decade) %>%\n  summarise(\n    n_countries = n_distinct(country),\n    total_pop = sum(pop) / 1e9,  # in billions\n    avg_lifeExp = weighted.mean(lifeExp, pop),\n    gdp_range = max(gdpPercap) - min(gdpPercap),\n    .groups = \"drop\"\n  ) %>%\n  arrange(continent, decade)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30 x 6\n   continent decade n_countries total_pop avg_lifeExp gdp_range\n   <fct>      <dbl>       <int>     <dbl>       <dbl>     <dbl>\n 1 Africa      1950          52     0.502        39.9     5188.\n 2 Africa      1960          52     0.632        44.2    18418.\n 3 Africa      1970          52     0.813        48.3    21487.\n 4 Africa      1980          52     1.07         52.0    16974.\n 5 Africa      1990          52     1.40         53.3    14411.\n 6 Africa      2000          52     1.76         54.0    12965.\n 7 Americas    1950          25     0.732        61.2    13449.\n 8 Americas    1960          25     0.914        64.0    18078.\n 9 Americas    1970          25     1.11         66.7    22418.\n10 Americas    1980          25     1.31         69.8    28061.\n# i 20 more rows\n```\n\n\n:::\n:::\n\n\n### Exercise 3: Window Functions\n\nFor each penguin species, identify the top 3 heaviest penguins and show their rank within their species:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your solution\npenguins %>%\n  drop_na(body_mass_g) %>%\n  group_by(species) %>%\n  mutate(\n    mass_rank = dense_rank(desc(body_mass_g))\n  ) %>%\n  filter(mass_rank <= 3) %>%\n  select(species, island, body_mass_g, mass_rank) %>%\n  arrange(species, mass_rank)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 4\n# Groups:   species [3]\n   species   island    body_mass_g mass_rank\n   <fct>     <fct>           <int>     <int>\n 1 Adelie    Biscoe           4775         1\n 2 Adelie    Biscoe           4725         2\n 3 Adelie    Torgersen        4700         3\n 4 Chinstrap Dream            4800         1\n 5 Chinstrap Dream            4550         2\n 6 Chinstrap Dream            4500         3\n 7 Gentoo    Biscoe           6300         1\n 8 Gentoo    Biscoe           6050         2\n 9 Gentoo    Biscoe           6000         3\n10 Gentoo    Biscoe           6000         3\n```\n\n\n:::\n:::\n\n\n### Exercise 4: Complex Joins\n\nCreate a summary showing:\n- Each airline carrier\n- Total number of flights\n- Average delay\n- Most common destination\n- Weather conditions for their most delayed flight\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your solution\ncarrier_summary <- flights %>%\n  group_by(carrier) %>%\n  summarise(\n    total_flights = n(),\n    avg_delay = mean(dep_delay, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\nmost_common_dest <- flights %>%\n  count(carrier, dest) %>%\n  group_by(carrier) %>%\n  slice_max(n, n = 1) %>%\n  select(carrier, most_common_dest = dest)\n\nmost_delayed <- flights %>%\n  group_by(carrier) %>%\n  slice_max(dep_delay, n = 1) %>%\n  select(carrier, year, month, day, hour, origin, max_delay = dep_delay)\n\n# Combine all information\nfinal_summary <- carrier_summary %>%\n  left_join(most_common_dest, by = \"carrier\") %>%\n  left_join(most_delayed, by = \"carrier\") %>%\n  left_join(\n    weather %>% \n      select(year, month, day, hour, origin, temp, wind_speed, precip),\n    by = c(\"year\", \"month\", \"day\", \"hour\", \"origin\")\n  ) %>%\n  select(carrier, total_flights, avg_delay, most_common_dest, \n         max_delay, temp, wind_speed, precip) %>%\n  arrange(desc(avg_delay))\n\nhead(final_summary, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 8\n   carrier total_flights avg_delay most_common_dest max_delay  temp wind_speed\n   <chr>           <int>     <dbl> <chr>                <dbl> <dbl>      <dbl>\n 1 F9                685      20.2 DEN                    853  23         8.06\n 2 EV              54173      20.0 IAD                    548  53.6       0   \n 3 YV                601      19.0 IAD                    387  64.0       9.21\n 4 FL               3260      18.7 ATL                    602  78.8      13.8 \n 5 WN              12275      17.7 MDW                    471  66.9      10.4 \n 6 9E              18460      16.7 CVG                    747  34.0      15.0 \n 7 B6              54635      13.0 FLL                    502  33.8       8.06\n 8 VX               5162      12.9 LAX                    653  89.1       9.21\n 9 OO                 32      12.6 CLE                    154  77         0   \n10 UA              58665      12.1 ORD                    483  81.0      11.5 \n# i 1 more variable: precip <dbl>\n```\n\n\n:::\n:::\n\n\n## Summary\n\nYou've mastered the essential dplyr functions:\n\n✅ Core verbs: filter, select, mutate, arrange, summarise  \n✅ Grouped operations with group_by  \n✅ All types of joins  \n✅ Window functions for advanced calculations  \n✅ Row-wise operations  \n✅ Database connections with dplyr  \n\n## What's Next?\n\nIn [Chapter 4](04-data-tidying.Rmd), we'll learn how to reshape and tidy messy data using tidyr, including pivoting, nesting, and handling missing values.\n\n## Additional Resources\n\n- [dplyr Documentation](https://dplyr.tidyverse.org/)\n- [dplyr Cheat Sheet](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf)\n- [R for Data Science - Data Transformation](https://r4ds.had.co.nz/transform.html)\n- [Window Functions Vignette](https://dplyr.tidyverse.org/articles/window-functions.html)\n",
    "supporting": [
      "03-data-wrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}